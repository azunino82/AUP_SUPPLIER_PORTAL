PROCEDURE "AUPSUP_DATABASE.data.procedures.Schedulers::UpdateTask" (
    IN I_BSTYP NVARCHAR(1)
 )
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER AS
BEGIN
 
DECLARE IT_BSART TABLE (ESART NVARCHAR(4));
DECLARE IT_CUST_FIELDS TABLE (CUST_FIELD NVARCHAR(30),SOURCE_TABLE NVARCHAR(30),SOURCE_FIELD NVARCHAR(30));

DECLARE I_EGLKZ_P_EXCL NVARCHAR(1);
DECLARE I_ELIKZ_P_EXCL NVARCHAR(1) DEFAULT 'X';
DECLARE I_LOEKZ_K_EXCL NVARCHAR(1);
DECLARE I_LOEKZ_P_EXCL NVARCHAR(1) DEFAULT 'X';
DECLARE I_MEMORY_EXCL NVARCHAR(1);  
DECLARE I_RETPO_P_EXCL NVARCHAR(1);
DECLARE I_WITH_EKES NVARCHAR(1);
DECLARE I_WITH_EKET NVARCHAR(1); 

DECLARE NEW_ODA_FROM_ABAP "AUPSUP_DATABASE.data.tables::T_JOB_ODA_STATUS";
DECLARE CURRENT_SYSID NVARCHAR(30);
DECLARE counterRow INTEGER;
DECLARE userid VARCHAR(250);
DECLARE IT_LIFNR TABLE (ELIFN NVARCHAR(10)); 
DECLARE IT_EBELN TABLE (EBELN NVARCHAR(10));
DECLARE IT_EBELP TABLE (EBELP VARCHAR(5));      
DECLARE IT_EKORG TABLE (EKORG NVARCHAR(4));
DECLARE IT_MATNR TABLE (MATNR NVARCHAR(40)); 
DECLARE IT_EKGRP TABLE (EKGRP NVARCHAR(3));
DECLARE IT_WERKS TABLE (EWERK NVARCHAR(4),DESCR NVARCHAR(255));
DECLARE IT_BSTYP TABLE (BSTYP NVARCHAR(1));
DECLARE ET_SAG_EKEH "AUPSUP_DATABASE.data.structures.SchedulingAgreement::ET_SAG_EKEHStructure";
DECLARE ET_SAG_EKEK "AUPSUP_DATABASE.data.structures.SchedulingAgreement::ET_SAG_EKEKStructure";
DECLARE ET_SAG_EKES "AUPSUP_DATABASE.data.structures.SchedulingAgreement::ET_SAG_EKESStructure";
DECLARE ET_SAG_EKET "AUPSUP_DATABASE.data.structures.SchedulingAgreement::ET_SAG_EKETStructure";
DECLARE ET_SAG_EKKO "AUPSUP_DATABASE.data.structures.SchedulingAgreement::ET_SAG_EKKOStructure";
DECLARE ET_SAG_EKPO "AUPSUP_DATABASE.data.structures.SchedulingAgreement::ET_SAG_EKPOStructure";
DECLARE C_TIMESTAMP TIMESTAMP; 

/*PRENDO IL SYD DA PASSARE AL SERVIZIO*/
SELECT SYSID INTO CURRENT_SYSID FROM "AUPSUP_DATABASE.data.tables::T_BCKND_SYSTEMS";

create local temporary table #IT_CUST_FIELDS (CUST_FIELD NVARCHAR(30),SOURCE_TABLE NVARCHAR(30),SOURCE_FIELD NVARCHAR(30));
create local temporary table #IT_EBELN (EBELN NVARCHAR(10));
create local temporary table #IT_EBELP (EBELP VARCHAR(5));
create local temporary table #IT_EKGRP (EKGRP NVARCHAR(3));
create local temporary table #IT_EKORG (EKORG NVARCHAR(4));
create local temporary table #IT_MATNR (MATNR NVARCHAR(40));

-- LOG START JOB 
select CURRENT_TIMESTAMP INTO C_TIMESTAMP FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";
INSERT INTO "AUPSUP_DATABASE.data.tables::T_LOGS" (SERVICE_NAME,CALLED_METHOD,DATA,STATUS,MESSAGE,LOG_TYPE,SID,USERID,LOG_DATE_TIME) VALUES ('JOB ODA','JOB',null,200,'Start JOB ODA','I',:CURRENT_SYSID,'JOB_USER',:C_TIMESTAMP);    
 
--IT_BSTYP = SELECT * FROM #IT_BSTYP;
IT_CUST_FIELDS = SELECT * FROM #IT_CUST_FIELDS;
IT_EBELN = SELECT * FROM #IT_EBELN;
IT_EBELP = SELECT * FROM #IT_EBELP;
IT_EKGRP = SELECT * FROM #IT_EKGRP;
IT_EKORG = SELECT * FROM #IT_EKORG;
IT_MATNR = SELECT * FROM #IT_MATNR;

IT_WERKS = SELECT PLANT AS EWERK, '' AS DESCR FROM "AUPSUP_DATABASE.data.tables::T_BU_PLANT";
IT_LIFNR = SELECT DISTINCT a.LIFNR as ELIFN FROM "AUPSUP_DATABASE.data.tables::T_METAID_FORN" AS a INNER JOIN (SELECT METAID FROM "AUPSUP_DATABASE.data.tables::T_METASUPPLIER_DATA" WHERE ATTIVO = 1) as b ON a.METAID = b.METAID;
--IT_BSTYP = SELECT 'F' AS BSTYP FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";
IT_BSART = SELECT BSART AS ESART FROM "AUPSUP_DATABASE.data.tables::T_ORDERS_TYPES" WHERE SYSID = :CURRENT_SYSID and LISTA_ODA = 'X' and BSTYP IN (SELECT BSTYP FROM :IT_BSTYP);

CALL "AUPSUP_DATABASE.data.virtualProcedures::VIRTUAL_MM00_SAG_DOC_LIST"(:IT_BSART,:IT_BSTYP,:IT_CUST_FIELDS,:IT_EBELN,:IT_EBELP,:IT_EKGRP,:IT_EKORG,:IT_LIFNR,:IT_MATNR,:IT_WERKS,'X','X','X','X','X','X',:I_EGLKZ_P_EXCL,:I_ELIKZ_P_EXCL,:I_LOEKZ_K_EXCL,:I_LOEKZ_P_EXCL,:I_MEMORY_EXCL,'X',:I_RETPO_P_EXCL,:ET_SAG_EKEH,:ET_SAG_EKEK,:ET_SAG_EKES,:ET_SAG_EKET,:ET_SAG_EKKO,:ET_SAG_EKPO);

SELECT * FROM :ET_SAG_EKEH;
SELECT * FROM :ET_SAG_EKEK;
SELECT * FROM :ET_SAG_EKES;
SELECT * FROM :ET_SAG_EKET;
SELECT * FROM :ET_SAG_EKKO;
SELECT * FROM :ET_SAG_EKPO;

DELETE FROM "AUPSUP_DATABASE.data.tables::ET_SAG_EKES" WHERE (EBELN) IN (SELECT EBELN FROM :ET_SAG_EKKO);
DELETE FROM "AUPSUP_DATABASE.data.tables::ET_SAG_EKET" WHERE (EBELN) IN (SELECT EBELN FROM :ET_SAG_EKKO);
DELETE FROM "AUPSUP_DATABASE.data.tables::ET_SAG_EKEH" WHERE (EBELN) IN (SELECT EBELN FROM :ET_SAG_EKKO);
DELETE FROM "AUPSUP_DATABASE.data.tables::ET_SAG_EKEK" WHERE (EBELN) IN (SELECT EBELN FROM :ET_SAG_EKKO);
DELETE FROM "AUPSUP_DATABASE.data.tables::ET_SAG_EKKO" WHERE (EBELN) IN (SELECT EBELN FROM :ET_SAG_EKKO);
DELETE FROM "AUPSUP_DATABASE.data.tables::ET_SAG_EKPO" WHERE (EBELN) IN (SELECT EBELN FROM :ET_SAG_EKKO);

INSERT INTO "AUPSUP_DATABASE.data.tables::ET_SAG_EKES"  SELECT * 
            FROM  :ET_SAG_EKES;

INSERT INTO "AUPSUP_DATABASE.data.tables::ET_SAG_EKET"  SELECT * 
            FROM  :ET_SAG_EKET;

INSERT INTO "AUPSUP_DATABASE.data.tables::ET_SAG_EKKO"  SELECT * 
            FROM  :ET_SAG_EKKO; 

INSERT INTO "AUPSUP_DATABASE.data.tables::ET_SAG_EKPO"  SELECT *  
            FROM  :ET_SAG_EKPO;
            
INSERT INTO "AUPSUP_DATABASE.data.tables::ET_SAG_EKEH"  SELECT * 
            FROM :ET_SAG_EKEH;

INSERT INTO "AUPSUP_DATABASE.data.tables::ET_SAG_EKEK"  SELECT *  
            FROM :ET_SAG_EKEK;   


-- LOG READ JOB 
SELECT COUNT(*) INTO counterRow FROM :ET_SAG_EKPO;
select CURRENT_TIMESTAMP INTO C_TIMESTAMP FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";
INSERT INTO "AUPSUP_DATABASE.data.tables::T_LOGS" (SERVICE_NAME,CALLED_METHOD,DATA,STATUS,MESSAGE,LOG_TYPE,SID,USERID,LOG_DATE_TIME) VALUES ('JOB DOC','JOB',null,200,CONCAT ('Number doc read: ', counterRow),'I',:CURRENT_SYSID,'JOB_USER',:C_TIMESTAMP);    
 

DROP TABLE #IT_CUST_FIELDS; 
DROP TABLE #IT_EBELP;
DROP TABLE #IT_EBELN;
DROP TABLE #IT_EKGRP; 
DROP TABLE #IT_EKORG;
DROP TABLE #IT_MATNR;

/*Estraggo dai risultati tutte gli ODA che non avevo giÃ  salvato prima*/
select CURRENT_TIMESTAMP INTO C_TIMESTAMP FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";
NEW_ODA_FROM_ABAP = SELECT EBELN, LIFNR, '' AS STATUS, :C_TIMESTAMP AS CREATION_DATE, null AS UPDATE_DATE FROM :ET_SAG_EKKO WHERE EBELN NOT IN (SELECT EBELN FROM "AUPSUP_DATABASE.data.tables::T_JOB_ODA_STATUS");

-- LOG Numero righe aggiornate
SELECT COUNT(*) INTO counterRow FROM :NEW_ODA_FROM_ABAP;
select CURRENT_TIMESTAMP INTO C_TIMESTAMP FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";
INSERT INTO "AUPSUP_DATABASE.data.tables::T_LOGS" (SERVICE_NAME,CALLED_METHOD,DATA,STATUS,MESSAGE,LOG_TYPE,SID,USERID,LOG_DATE_TIME) VALUES ('JOB DOC','JOB',null,200,CONCAT ('Number DOC update: ', counterRow),'I',:CURRENT_SYSID,'JOB_USER',:C_TIMESTAMP);    
 

/*Aggiungo i nuovi ODA a quelli salvati*/
INSERT INTO "AUPSUP_DATABASE.data.tables::T_JOB_ODA_STATUS" ("EBELN","LIFNR","STATUS","CREATION_DATE","UPDATE_DATE") SELECT * FROM :NEW_ODA_FROM_ABAP;

	SELECT COUNT(*) INTO counterRow FROM :NEW_ODA_FROM_ABAP;
	IF (counterRow>0) THEN 
		BEGIN
            DECLARE I_APP NVARCHAR(10);
            DECLARE I_EVENT NVARCHAR(10);
            DECLARE I_NAVIGATION_INTENT NVARCHAR(255);
			DECLARE CURSOR cursorODA FOR SELECT DISTINCT * FROM :NEW_ODA_FROM_ABAP;

            IF I_BSTYP = 'F' THEN
                I_APP:='ODA';
                I_EVENT:='NOR';
                I_NAVIGATION_INTENT:='PurchaseOrders';
            END IF;
            IF I_BSTYP = 'L' THEN
                I_APP:='P_CONS';
                I_EVENT:='NPC';
                I_NAVIGATION_INTENT:='SchedulingAgreement';
            END IF;

			FOR cursorRow AS cursorODA DO
                CALL "AUPSUP_DATABASE.data.procedures.Notifications::InsertNotification" ('JOB_ODA',:I_NAVIGATION_INTENT,cursorRow.EBELN,:I_APP,:I_EVENT,'','','IT',cursorRow.LIFNR,'','');
			END FOR;
			
		/*Aggiorno gli stati sulla tabella*/
		UPDATE
            Table_A
        SET
            Table_A.EBELN = Table_B.EBELN,
            Table_A.LIFNR = Table_B.LIFNR,
                Table_A.STATUS = 'I',
                    Table_A.CREATION_DATE = Table_B.CREATION_DATE,
                        Table_A.UPDATE_DATE = :C_TIMESTAMP
        FROM
            "AUPSUP_DATABASE.data.tables::T_JOB_ODA_STATUS" AS Table_A
            INNER JOIN :NEW_ODA_FROM_ABAP AS Table_B
                ON Table_A.EBELN = Table_B.EBELN;
		END;
	END IF;

END