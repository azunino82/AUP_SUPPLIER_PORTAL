PROCEDURE "AUPSUP_DATABASE.data.procedures.InboundDelivery::MM00_INB_DLV_DOC_LIST" ( 
IN userid VARCHAR(250),
IN IT_LIFNR TABLE (ELIFN NVARCHAR(10)),
IN IT_EBELN TABLE (EBELN NVARCHAR(10)), /*usato per estrarre le info di 1 o + codici ordini*/
IN IT_EKORG TABLE (EKORG NVARCHAR(4)),
IN IT_MATNR TABLE (MATNR NVARCHAR(40)),
IN IT_WERKS TABLE (EWERK NVARCHAR(4),DESCR NVARCHAR(255)),
IN I_EINDT_FROM VARCHAR(8),
IN I_EINDT_TO VARCHAR(8), 
/*
OUT ET_INB_DLV_EKKO "AUPSUP_DATABASE.data.structures.InboundDelivery::ET_INB_DLV_EKKOStructure",
OUT ET_INB_DLV_EKPO "AUPSUP_DATABASE.data.structures.InboundDelivery::ET_INB_DLV_EKPOStructure",
OUT ET_INB_DLV_EKET "AUPSUP_DATABASE.data.structures.InboundDelivery::ET_INB_DLV_EKETStructure",
OUT ET_INB_DLV_EKES "AUPSUP_DATABASE.data.structures.InboundDelivery::ET_INB_DLV_EKESStructure"
*/
OUT out_table "AUPSUP_DATABASE.data.structures.InboundDelivery::OUT_SCHEDULATIONSStructure"
) 
	LANGUAGE SQLSCRIPT 
	SQL SECURITY INVOKER  AS
	
BEGIN     
 
DECLARE IT_CUST_FIELDS TABLE(
CUST_FIELD NVARCHAR(30),
SOURCE_TABLE NVARCHAR(30),  
SOURCE_FIELD NVARCHAR(30)
);

DECLARE ET_INB_DLV_EKKO "AUPSUP_DATABASE.data.structures.InboundDelivery::ET_INB_DLV_EKKOStructure";
DECLARE ET_INB_DLV_EKPO "AUPSUP_DATABASE.data.structures.InboundDelivery::ET_INB_DLV_EKPOStructure";
DECLARE ET_INB_DLV_EKET "AUPSUP_DATABASE.data.structures.InboundDelivery::ET_INB_DLV_EKETStructure";
DECLARE ET_INB_DLV_EKES "AUPSUP_DATABASE.data.structures.InboundDelivery::ET_INB_DLV_EKESStructure";
DECLARE ET_INB_DLV_LIPS "AUPSUP_DATABASE.data.structures.InboundDelivery::ET_INB_DLV_LIPSStructure";
DECLARE IT_BSTYP TABLE(BSTYP NVARCHAR(1));
DECLARE IT_BSART TABLE(ESART NVARCHAR(4));
DECLARE IT_BSTAE TABLE(BSTAE NVARCHAR(4)); /*TBD*/
DECLARE IT_VENDOR TABLE (LIFNR NVARCHAR(10),EKORG NVARCHAR(4));
DECLARE I_EGLKZ_P_EXCL NVARCHAR(1);
DECLARE counterRow INTEGER;
DECLARE metaid NVARCHAR(50);
DECLARE I_ELIKZ_P_EXCL NVARCHAR(1);
DECLARE I_LOEKZ_K_EXCL NVARCHAR(1);
DECLARE I_LOEKZ_P_EXCL NVARCHAR(1);
DECLARE I_MEMORY_EXCL NVARCHAR(1);
DECLARE I_RETPO_P_EXCL NVARCHAR(1);
DECLARE I_WITH_EKEH NVARCHAR(1);
DECLARE I_WITH_EKEK NVARCHAR(1);
DECLARE I_WITH_EKES NVARCHAR(1);
DECLARE I_WITH_EKET NVARCHAR(1);
DECLARE I_WITH_EKKO NVARCHAR(1);
DECLARE I_WITH_EKPO NVARCHAR(1);
DECLARE IT_LIFNR_VENDOR TABLE (LIFNR NVARCHAR(10));
DECLARE counter INTEGER;
DECLARE IT_WERKS_VP TABLE (WERKS NVARCHAR(4));
DECLARE T_DIFF_EKES TABLE(EBELN NVARCHAR(10),EBELP VARCHAR(5),DIFF_EKES DECIMAL(14,3));
DECLARE T_DIFF_EKET TABLE(EBELN NVARCHAR(10),EBELP VARCHAR(5), ETENR VARCHAR(4), DIFF_EKET DECIMAL(14,3));
DECLARE CURRENT_SYSID NVARCHAR(30);

DECLARE I_LIFNR TABLE (LIFNR NVARCHAR(10));
DECLARE IT_EXIDV TABLE (EXIDV NVARCHAR(20));
DECLARE IT_VBELN TABLE (VBELN NVARCHAR(10));
DECLARE IT_VERUR TABLE (VERUR NVARCHAR(35));
DECLARE IT_VGBEL TABLE (VGBEL NVARCHAR(10));
DECLARE I_LFDAT_FROM VARCHAR(8);
DECLARE I_LFDAT_TO VARCHAR(8);
DECLARE I_WADAT_FROM VARCHAR(8);
DECLARE I_WADAT_TO VARCHAR(8);

create local temporary table #IT_BSART (ESART NVARCHAR(4));
create local temporary table #IT_BSTYP (BSTYP NVARCHAR(1));
create local temporary table #IT_VENDOR (LIFNR NVARCHAR(10),EKORG NVARCHAR(4));
create local temporary table #IT_LIFNR_VENDOR (LIFNR NVARCHAR(10));
create local temporary table #I_LIFNR (LIFNR NVARCHAR(10));
create local temporary table #IT_EXIDV (EXIDV NVARCHAR(20));
create local temporary table #IT_VERUR (VERUR NVARCHAR(35));
create local temporary table #IT_VGBEL (VGBEL NVARCHAR(10));
create local temporary table #out_table LIKE "AUPSUP_DATABASE.data.structures.InboundDelivery::OUT_SCHEDULATIONSStructure";

IT_BSART = SELECT * FROM #IT_BSART;
IT_BSTYP = SELECT * FROM #IT_BSTYP;
IT_VENDOR = SELECT * FROM #IT_VENDOR;
IT_LIFNR_VENDOR = SELECT * FROM #IT_LIFNR_VENDOR;
IT_EXIDV = SELECT * FROM #IT_EXIDV;
IT_VERUR = SELECT * FROM #IT_VERUR;
IT_VGBEL = SELECT * FROM #IT_VGBEL;
I_LIFNR = SELECT * FROM #I_LIFNR;

/*PRENDO IL SYD DA PASSARE AL SERVIZIO*/
SELECT SYSID INTO CURRENT_SYSID FROM "AUPSUP_DATABASE.data.tables::T_BCKND_SYSTEMS";

/*Controllo se le organizzazioni commerciali sono state passate dal servizio*/
SELECT COUNT(*) into counterRow FROM :IT_EKORG WHERE EKORG <> '';
IF counterRow = 0 THEN
	/* prendo le organizzazioni commerciali dell'utente connesso*/
	CALL "AUPSUP_DATABASE.data.procedures.Utils::GetUserPurchaseOrgs"(:userid,:IT_EKORG);
END IF;

/*estrazione dei PLANT (WERKS) dell'utente connesso bisogna capire dove prendere il SYSID*/
SELECT COUNT(*) into counter FROM :IT_WERKS;
IF counter = 0 THEN
	CALL "AUPSUP_DATABASE.data.procedures.Utils::GetUserPlants"(:userid,:IT_WERKS);
END IF;

IT_WERKS_VP = SELECT EWERK AS WERKS FROM :IT_WERKS;


/*inizializzazione tabelle input*/
SELECT 'X' INTO I_ELIKZ_P_EXCL FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";
SELECT 'X' INTO I_LOEKZ_K_EXCL FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";
SELECT 'X' INTO I_LOEKZ_P_EXCL FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";
SELECT 'X' INTO I_MEMORY_EXCL FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";
SELECT 'X' INTO I_RETPO_P_EXCL FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";
SELECT 'X' INTO I_WITH_EKEH FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";
SELECT 'X' INTO I_WITH_EKEK FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";
SELECT 'X' INTO I_WITH_EKES FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";
SELECT 'X' INTO I_WITH_EKET FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";
SELECT 'X' INTO I_WITH_EKKO FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";
SELECT 'X' INTO I_WITH_EKPO FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";
SELECT 'X' INTO I_EGLKZ_P_EXCL FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";

IT_CUST_FIELDS = SELECT * FROM "AUPSUP_DATABASE.data.tables::T_MM00_VENDOR_LIST_IT_CUST_FIELDS";

IT_BSTAE = SELECT DISTINCT PROFILO_CONTROLLO AS BSTAE FROM "AUPSUP_DATABASE.data.tables::T_PROFILI_CONFERMA" WHERE TIPO_CONFERMA = '2';

/*SE non passo nessun fornitore li cerco in base a se sono buyer o supplier*/
SELECT COUNT(*) into counterRow FROM :IT_LIFNR;
IF (counterRow = 0) THEN
	/*estrazione dei fornitori se ho un metafornitore quindi sono un supplier*/
	SELECT COUNT(*) into counterRow FROM "AUPSUP_DATABASE.data.tables::T_USERID_METAID" 
	WHERE USERID = :userid;
	
	IF (counterRow > 0) THEN
	/*SONO SUPPLIER*/
		SELECT METAID into metaid FROM "AUPSUP_DATABASE.data.tables::T_USERID_METAID" 
		WHERE USERID = :userid;
		
		IT_LIFNR = SELECT LIFNR AS ELIFN
		FROM "AUPSUP_DATABASE.data.tables::T_METAID_FORN" 
		WHERE METAID = :metaid;
		
	ELSE
		/*SONO BUYER: chiamo la bapi per avere tutti i "miei fornitori"*/
		-- faccio un pre filtro con tutti i fornitori legati ai metasupplier attivi che ci sono sul portale
    	IT_LIFNR_VENDOR = SELECT a.LIFNR as LIFNR FROM "AUPSUP_DATABASE.data.tables::T_METAID_FORN" AS a 
    	INNER JOIN (SELECT METAID FROM "AUPSUP_DATABASE.data.tables::T_METASUPPLIER_DATA" WHERE ATTIVO = 1) as b ON a.METAID = b.METAID;
    	
		CALL "AUPSUP_DATABASE.data.procedures.Orders::MM00_VENDOR_LIST"(:userid,'','',:IT_LIFNR_VENDOR,:IT_EKORG,:BUYER_LIFNR);
		select COUNT(*) into counterRow FROM :IT_EKORG;
		IF (counterRow > 0) THEN
			IT_LIFNR = SELECT DISTINCT LIFNR AS ELIFN FROM :BUYER_LIFNR WHERE EKORG IN (select EKORG FROM :IT_EKORG);
		ELSE
			IT_LIFNR = SELECT DISTINCT LIFNR AS ELIFN FROM :BUYER_LIFNR;
		END IF;
	END IF;
END IF;

CALL "AUPSUP_DATABASE.data.virtualProcedures::VIRTUAL_MM00_INB_DLV_DOC_LIST"(:IT_BSART,:IT_BSTAE,:IT_BSTYP,:IT_CUST_FIELDS,:IT_EBELN,:IT_EKORG,:IT_LIFNR,:IT_MATNR,:IT_VENDOR,:IT_WERKS_VP,:I_EGLKZ_P_EXCL,:I_EINDT_FROM,:I_EINDT_TO,:I_ELIKZ_P_EXCL,:I_LOEKZ_K_EXCL,:I_LOEKZ_P_EXCL,:I_MEMORY_EXCL,:I_RETPO_P_EXCL,:I_WITH_EKEH,:I_WITH_EKEK,:I_WITH_EKES,:I_WITH_EKET,:I_WITH_EKKO,:I_WITH_EKPO,
:ET_INB_DLV_EKEH,:ET_INB_DLV_EKEK,:ET_INB_DLV_EKES,:ET_INB_DLV_EKET,:ET_INB_DLV_EKKO,:ET_INB_DLV_EKPO,:ET_INB_DLV_LIPS);

SELECT * FROM :ET_INB_DLV_EKEH ;
SELECT * FROM :ET_INB_DLV_EKEK ;
ET_INB_DLV_EKES = SELECT * FROM :ET_INB_DLV_EKES ORDER BY EBELN,EBELP,ETENS;
ET_INB_DLV_EKET = SELECT * FROM :ET_INB_DLV_EKET ORDER BY EBELN,EBELP,ETENR;
ET_INB_DLV_EKKO = SELECT * FROM :ET_INB_DLV_EKKO ORDER BY EBELN;
ET_INB_DLV_EKPO = SELECT * FROM :ET_INB_DLV_EKPO ORDER BY EBELN,EBELP;
ET_INB_DLV_LIPS = SELECT * FROM :ET_INB_DLV_LIPS;

SELECT COUNT(*) into counterRow FROM :ET_INB_DLV_EKPO ;
IF (counterRow > 0) THEN
	BEGIN

		DECLARE CURSOR cursorEKKO FOR SELECT * FROM :ET_INB_DLV_EKKO;

			FOR cursorRow AS cursorEKKO DO
				-- per ogni ordine cerco se i progressivi non attivi sulla tabella order types
				SELECT COUNT(*) into counterRow FROM "AUPSUP_DATABASE.data.tables::T_ORDERS_TYPES" WHERE BSART = cursorRow.BSART AND PROGRESSIVI = '';
				IF (counterRow > 0) THEN
					BEGIN
						-- estraggo tutte le posizioni che degli ordini con i progressivi non attivi
						DECLARE CURSOR cursorEKPO FOR SELECT * FROM :ET_INB_DLV_EKPO WHERE EBELN = cursorRow.EBELN;
						FOR cursorRowEkpo AS cursorEKPO DO
							BEGIN
								-- Per ogni EKPO-BSTAE andare in T_PROFILI_CONFERMA dove EKPO-BSTAE = T_PROFILI_CONFERMA- PROFILO_CONTROLLO e T_PROFILI_CONFERMA- TIPO_CONFERMA = 1
								SELECT COUNT(*) into counterRow FROM "AUPSUP_DATABASE.data.tables::T_PROFILI_CONFERMA" WHERE PROFILO_CONTROLLO = cursorRowEkpo.BSTAE AND TIPO_CONFERMA = '1';
								-- Se trovo qualcosa
								IF (counterRow > 0) THEN

									INSERT INTO #out_table 
									SELECT table1.MANDT as MANDT, table1.SYSID as SYSID, table1.EBELN as EBELN, table1.EBELP as EBELP, table1.ETENS as ETENR, 
										table2.MATNR as MATNR, table2.TXZ01 as TXZ01, table2.IDNLF as IDNLF, table2.BSTAE as BSTAE, table2.WERKS as WERKS,
										c.PLANT_DESCR as DESCR_WERKS, table1.MENGE as MENGE,
										0 AS QUANT_SCHED, table2.MEINS as MEINS, table1.EINDT as EINDT, d.LIFNR as LIFNR, d.NAME1 as NAME1, 'C' as TYPE, table1.LIFEXPOS as LIFEXPOS, table1.XBLNR as XBLNR,
										COALESCE((SELECT SUM(LFIMG) FROM :ET_INB_DLV_LIPS WHERE VGBEL = table1.EBELN and VGPOS = table1.EBELP and LIFEXPOS = (SELECT "AUPSUP_DATABASE.data.functions::TF_ADD_ZERO_BEFORE"(table1.XBLNR,6) FROM "AUPSUP_DATABASE.data.synonyms::DUMMY")),0) AS LFIMG
									
										FROM :ET_INB_DLV_EKES as table1
										INNER JOIN :ET_INB_DLV_EKPO as table2 ON table1.EBELN = table2.EBELN and table1.EBELP = table2.EBELP
										INNER JOIN "AUPSUP_DATABASE.data.tables::T_BU_PLANT" AS c ON table2.WERKS = c.PLANT
										INNER JOIN :ET_INB_DLV_EKKO AS d ON d.EBELN = table1.EBELN
										WHERE (table1.EBELN,table1.EBELP,table1.EBTYP) IN (SELECT a.EBELN,a.EBELP,b.CAT_CONF_RIFER_NO_PROGR FROM :ET_INB_DLV_EKPO as a
										INNER JOIN "AUPSUP_DATABASE.data.tables::T_PROFILI_CONFERMA" as b ON a.BSTAE = b.PROFILO_CONTROLLO WHERE b.TIPO_CONFERMA = '2')
										AND table1.EBELN = cursorRowEkpo.EBELN and table1.EBELP = cursorRowEkpo.EBELP;

								ELSE
									/* Se non trovo nulla
									1)	Altrimenti estrarre le schedulazioni EKET e EKEH, con la medesima logica attuale. Verificare che sia nettizzata EKET-MENGE con EKET-MENGE. Dovrebbe essere già attiva la logica
									*/
									INSERT INTO #out_table 
									SELECT a.MANDT, a.SYSID, a.EBELN, a.EBELP, b.ETENR, a.MATNR, a.TXZ01, a.IDNLF, a.BSTAE, a.WERKS, c.PLANT_DESCR as DESCR_WERKS, (b.MENGE - b.WEMNG) AS MENGE,
									(b.MENGE - b.WEMNG) AS QUANT_SCHED, a.MEINS,b.EINDT,d.LIFNR,d.NAME1, 'S' as TYPE, '' as LIFEXPOS, b.ETENR as XBLNR, 0 as LFIMG from 
									:ET_INB_DLV_EKPO as a 
									INNER JOIN :ET_INB_DLV_EKET AS b ON a.EBELN = b.EBELN AND a.EBELP = b.EBELP 
									INNER JOIN "AUPSUP_DATABASE.data.tables::T_BU_PLANT" AS c ON a.WERKS = c.PLANT
									INNER JOIN :ET_INB_DLV_EKKO AS d ON a.EBELN = d.EBELN -- per estrarre il LIFNR sulle testate utile per invio mail
									WHERE a.EBELN = cursorRowEkpo.EBELN and a.EBELP = cursorRowEkpo.EBELP;
									--WHERE (b.MENGE - b.WEMNG) >= 0;							

								END IF;							
							END;
						END FOR;	

					END;	

				ELSE

					INSERT INTO #out_table 
					SELECT a.MANDT, a.SYSID, a.EBELN, a.EBELP, b.ETENR, a.MATNR, a.TXZ01, a.IDNLF, a.BSTAE, a.WERKS, c.PLANT_DESCR as DESCR_WERKS, (b.MENGE - b.WEMNG) AS MENGE,(b.MENGE - b.WEMNG) AS QUANT_SCHED, a.MEINS,b.EINDT,d.LIFNR,
					d.NAME1, 'S' as TYPE, '' as LIFEXPOS, b.ETENR as XBLNR, 0 as LFIMG from :ET_INB_DLV_EKPO as a 
					INNER JOIN :ET_INB_DLV_EKET AS b ON a.EBELN = b.EBELN AND a.EBELP = b.EBELP 
					INNER JOIN "AUPSUP_DATABASE.data.tables::T_BU_PLANT" AS c ON a.WERKS = c.PLANT
					INNER JOIN :ET_INB_DLV_EKKO AS d ON a.EBELN = d.EBELN -- per estrarre il LIFNR sulle testate utile per invio mail
					WHERE (b.MENGE - b.WEMNG) >= 0;

				END IF;		


			END FOR;
	END;


END IF;	

/*
 - 
								COALESCE((SELECT (t1.MENGE-t1.DABMG) FROM :ET_INB_DLV_EKES as t1 
								INNER JOIN "AUPSUP_DATABASE.data.tables::T_PROFILI_CONFERMA" as t2 ON t1.EBTYP = t2.CAT_CONFERMA 
								INNER JOIN :ET_INB_DLV_EKET AS c ON t1.EBELN = c.EBELN AND t1.EBELP = c.EBELP 
								INNER JOIN :ET_INB_DLV_LIPS as z ON z.VGBEL = t1.EBELN and z.VGPOS = t1.EBELP 
								WHERE z.LIFEXPOS = (SELECT "AUPSUP_DATABASE.data.functions::TF_ADD_ZERO_BEFORE"(b.ETENR,6) FROM "AUPSUP_DATABASE.data.synonyms::DUMMY") AND t2.TIPO_CONFERMA = '2'  ),0)
								
*/


BEGIN

		DECLARE CURSOR cursorEKKO FOR SELECT * FROM #out_table WHERE TYPE = 'S';
		FOR cursorRow AS cursorEKKO DO

		UPDATE #out_table as table1 SET table1.MENGE = (cursorRow.MENGE - 
		COALESCE(
			
		/*	(SELECT DISTINCT (t1.MENGE-t1.DABMG) FROM :ET_INB_DLV_EKES as t1 
								INNER JOIN "AUPSUP_DATABASE.data.tables::T_PROFILI_CONFERMA" as t2 ON t1.EBTYP = t2.CAT_CONFERMA 
								INNER JOIN :ET_INB_DLV_LIPS as z ON z.VBELN = t1.VBELN and z.POSNR = t1.VBELP 
								WHERE z.LIFEXPOS = 
								(SELECT "AUPSUP_DATABASE.data.functions::TF_ADD_ZERO_BEFORE"(cursorRow.ETENR,6) FROM "AUPSUP_DATABASE.data.synonyms::DUMMY") 
								AND t2.TIPO_CONFERMA = '2') */

			(SELECT SUM(MENGE-DABMG) FROM :ET_INB_DLV_EKES WHERE (VBELN,VBELP) IN 
			(SELECT VBELN,POSNR FROM :ET_INB_DLV_LIPS WHERE VGBEL = cursorRow.EBELN AND VGPOS = cursorRow.EBELP AND 
			LIFEXPOS = (SELECT "AUPSUP_DATABASE.data.functions::TF_ADD_ZERO_BEFORE"(cursorRow.ETENR,6) FROM "AUPSUP_DATABASE.data.synonyms::DUMMY")  ))	
								
								
								
								,0)
		) WHERE table1.EBELN = cursorRow.EBELN and table1.EBELP = cursorRow.EBELP and table1.ETENR = cursorRow.ETENR;

		END FOR;

END;


 
 out_table = SELECT DISTINCT * FROM #out_table ORDER BY EBELN, EBELP, EINDT ASC;

 DROP TABLE #IT_BSART;
 DROP TABLE #IT_BSTYP;
 DROP TABLE #IT_VENDOR;
 DROP TABLE #IT_LIFNR_VENDOR;
 DROP TABLE #IT_EXIDV;
 DROP TABLE #IT_VGBEL;
 DROP TABLE #IT_VERUR;
 DROP TABLE #I_LIFNR;
 DROP TABLE #out_table;
 
END;	