PROCEDURE "AUPSUP_DATABASE.data.procedures.InboundDelivery::MM00_INB_DLV_DOC_LIST" ( 
IN userid VARCHAR(250),
IN IT_LIFNR TABLE (ELIFN NVARCHAR(10)),
IN IT_EBELN TABLE (EBELN NVARCHAR(10)), /*usato per estrarre le info di 1 o + codici ordini*/
IN IT_EKORG TABLE (EKORG NVARCHAR(4)),
IN IT_MATNR TABLE (MATNR NVARCHAR(40)),
IN IT_WERKS TABLE (EWERK NVARCHAR(4),DESCR NVARCHAR(255)),
IN I_EINDT_FROM VARCHAR(8),
IN I_EINDT_TO VARCHAR(8), 
/*
OUT ET_INB_DLV_EKKO "AUPSUP_DATABASE.data.structures.InboundDelivery::ET_INB_DLV_EKKOStructure",
OUT ET_INB_DLV_EKPO "AUPSUP_DATABASE.data.structures.InboundDelivery::ET_INB_DLV_EKPOStructure",
OUT ET_INB_DLV_EKET "AUPSUP_DATABASE.data.structures.InboundDelivery::ET_INB_DLV_EKETStructure",
OUT ET_INB_DLV_EKES "AUPSUP_DATABASE.data.structures.InboundDelivery::ET_INB_DLV_EKESStructure"
*/
OUT out_table "AUPSUP_DATABASE.data.structures.InboundDelivery::OUT_SCHEDULATIONSStructure"
) 
	LANGUAGE SQLSCRIPT 
	SQL SECURITY INVOKER  AS
	
BEGIN
 
DECLARE IT_CUST_FIELDS TABLE(
CUST_FIELD NVARCHAR(30),
SOURCE_TABLE NVARCHAR(30),  
SOURCE_FIELD NVARCHAR(30)
);

DECLARE ET_INB_DLV_EKKO "AUPSUP_DATABASE.data.structures.InboundDelivery::ET_INB_DLV_EKKOStructure";
DECLARE ET_INB_DLV_EKPO "AUPSUP_DATABASE.data.structures.InboundDelivery::ET_INB_DLV_EKPOStructure";
DECLARE ET_INB_DLV_EKET "AUPSUP_DATABASE.data.structures.InboundDelivery::ET_INB_DLV_EKETStructure";
DECLARE ET_INB_DLV_EKES "AUPSUP_DATABASE.data.structures.InboundDelivery::ET_INB_DLV_EKESStructure";
DECLARE IT_BSTYP TABLE(BSTYP NVARCHAR(1));
DECLARE IT_BSART TABLE(ESART NVARCHAR(4));
DECLARE IT_BSTAE TABLE(BSTAE NVARCHAR(4)); /*TBD*/
DECLARE IT_VENDOR TABLE (LIFNR NVARCHAR(10),EKORG NVARCHAR(4));
DECLARE I_EGLKZ_P_EXCL NVARCHAR(1);
DECLARE counterRow INTEGER;
DECLARE metaid NVARCHAR(50);
DECLARE I_ELIKZ_P_EXCL NVARCHAR(1);
DECLARE I_LOEKZ_K_EXCL NVARCHAR(1);
DECLARE I_LOEKZ_P_EXCL NVARCHAR(1);
DECLARE I_MEMORY_EXCL NVARCHAR(1);
DECLARE I_RETPO_P_EXCL NVARCHAR(1);
DECLARE I_WITH_EKEH NVARCHAR(1);
DECLARE I_WITH_EKEK NVARCHAR(1);
DECLARE I_WITH_EKES NVARCHAR(1);
DECLARE I_WITH_EKET NVARCHAR(1);
DECLARE I_WITH_EKKO NVARCHAR(1);
DECLARE I_WITH_EKPO NVARCHAR(1);
DECLARE IT_LIFNR_VENDOR TABLE (LIFNR NVARCHAR(10));
DECLARE counter INTEGER;
DECLARE IT_WERKS_VP TABLE (WERKS NVARCHAR(4));
DECLARE T_DIFF_EKES TABLE(EBELN NVARCHAR(10),EBELP VARCHAR(5),DIFF_EKES DECIMAL(14,3));
DECLARE T_DIFF_EKET TABLE(EBELN NVARCHAR(10),EBELP VARCHAR(5), ETENR VARCHAR(4), DIFF_EKET DECIMAL(14,3));
DECLARE CURRENT_SYSID NVARCHAR(30);

create local temporary table #IT_BSART (ESART NVARCHAR(4));
create local temporary table #IT_BSTYP (BSTYP NVARCHAR(1));
create local temporary table #IT_VENDOR (LIFNR NVARCHAR(10),EKORG NVARCHAR(4));
create local temporary table #IT_LIFNR_VENDOR (LIFNR NVARCHAR(10));

IT_BSART = SELECT * FROM #IT_BSART;
IT_BSTYP = SELECT * FROM #IT_BSTYP;
IT_VENDOR = SELECT * FROM #IT_VENDOR;
IT_LIFNR_VENDOR = SELECT * FROM #IT_LIFNR_VENDOR;

/*PRENDO IL SYD DA PASSARE AL SERVIZIO*/
SELECT SYSID INTO CURRENT_SYSID FROM "AUPSUP_DATABASE.data.tables::T_BCKND_SYSTEMS";

/*Controllo se le organizzazioni commerciali sono state passate dal servizio*/
SELECT COUNT(*) into counterRow FROM :IT_EKORG WHERE EKORG <> '';
IF counterRow = 0 THEN
	/* prendo le organizzazioni commerciali dell'utente connesso*/
	CALL "AUPSUP_DATABASE.data.procedures.Utils::GetUserPurchaseOrgs"(:userid,:IT_EKORG);
END IF;

/*estrazione dei PLANT (WERKS) dell'utente connesso bisogna capire dove prendere il SYSID*/
SELECT COUNT(*) into counter FROM :IT_WERKS;
IF counter = 0 THEN
	CALL "AUPSUP_DATABASE.data.procedures.Utils::GetUserPlants"(:userid,:IT_WERKS);
END IF;

IT_WERKS_VP = SELECT EWERK AS WERKS FROM :IT_WERKS;


/*inizializzazione tabelle input*/
SELECT 'X' INTO I_ELIKZ_P_EXCL FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";
SELECT 'X' INTO I_LOEKZ_K_EXCL FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";
SELECT 'X' INTO I_LOEKZ_P_EXCL FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";
SELECT 'X' INTO I_MEMORY_EXCL FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";
SELECT 'X' INTO I_RETPO_P_EXCL FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";
SELECT 'X' INTO I_WITH_EKEH FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";
SELECT 'X' INTO I_WITH_EKEK FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";
SELECT 'X' INTO I_WITH_EKES FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";
SELECT 'X' INTO I_WITH_EKET FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";
SELECT 'X' INTO I_WITH_EKKO FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";
SELECT 'X' INTO I_WITH_EKPO FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";
SELECT 'X' INTO I_EGLKZ_P_EXCL FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";

IT_CUST_FIELDS = SELECT * FROM "AUPSUP_DATABASE.data.tables::T_MM00_VENDOR_LIST_IT_CUST_FIELDS";

IT_BSTAE = SELECT DISTINCT PROFILO_CONTROLLO AS BSTAE FROM "AUPSUP_DATABASE.data.tables::T_PROFILI_CONFERMA" WHERE TIPO_CONFERMA = '2';

/*SE non passo nessun fornitore li cerco in base a se sono buyer o supplier*/
SELECT COUNT(*) into counterRow FROM :IT_LIFNR;
IF (counterRow = 0) THEN
	/*estrazione dei fornitori se ho un metafornitore quindi sono un supplier*/
	SELECT COUNT(*) into counterRow FROM "AUPSUP_DATABASE.data.tables::T_USERID_METAID" 
	WHERE USERID = :userid;
	
	IF (counterRow > 0) THEN
	/*SONO SUPPLIER*/
		SELECT METAID into metaid FROM "AUPSUP_DATABASE.data.tables::T_USERID_METAID" 
		WHERE USERID = :userid;
		
		IT_LIFNR = SELECT LIFNR AS ELIFN
		FROM "AUPSUP_DATABASE.data.tables::T_METAID_FORN" 
		WHERE METAID = :metaid;
		
	ELSE
		/*SONO BUYER: chiamo la bapi per avere tutti i "miei fornitori"*/
		-- faccio un pre filtro con tutti i fornitori legati ai metasupplier attivi che ci sono sul portale
    	IT_LIFNR_VENDOR = SELECT a.LIFNR as LIFNR FROM "AUPSUP_DATABASE.data.tables::T_METAID_FORN" AS a 
    	INNER JOIN (SELECT METAID FROM "AUPSUP_DATABASE.data.tables::T_METASUPPLIER_DATA" WHERE ATTIVO = 1) as b ON a.METAID = b.METAID;
    	
		CALL "AUPSUP_DATABASE.data.procedures.Orders::MM00_VENDOR_LIST"(:userid,'','',:IT_LIFNR_VENDOR,:IT_EKORG,:BUYER_LIFNR);
		select COUNT(*) into counterRow FROM :IT_EKORG;
		IF (counterRow > 0) THEN
			IT_LIFNR = SELECT DISTINCT LIFNR AS ELIFN FROM :BUYER_LIFNR WHERE EKORG IN (select EKORG FROM :IT_EKORG);
		ELSE
			IT_LIFNR = SELECT DISTINCT LIFNR AS ELIFN FROM :BUYER_LIFNR;
		END IF;
	END IF;
END IF;

-- TODO VIRTUAL PROCED CALL "AUPSUP_DATABASE.data.tables::VIRTUAL_MM00_INB_DLV_DOC_LIST"(:IT_BSART,:IT_BSTAE,:IT_BSTYP,:IT_CUST_FIELDS,:IT_EBELN,:IT_EKORG,:IT_LIFNR,:IT_MATNR,:IT_VENDOR,:IT_WERKS_VP,:I_EGLKZ_P_EXCL,:I_EINDT_FROM,:I_EINDT_TO,:I_ELIKZ_P_EXCL,:I_LOEKZ_K_EXCL,:I_LOEKZ_P_EXCL,:I_MEMORY_EXCL,:I_RETPO_P_EXCL,:I_WITH_EKEH,:I_WITH_EKEK,:I_WITH_EKES,:I_WITH_EKET,:I_WITH_EKKO,:I_WITH_EKPO,
-- :ET_INB_DLV_EKEH,:ET_INB_DLV_EKEK,:ET_INB_DLV_EKES,:ET_INB_DLV_EKET,:ET_INB_DLV_EKKO,:ET_INB_DLV_EKPO);

-- TODO REMOVE SELECT * FROM :ET_INB_DLV_EKEH ;
-- TODO REMOVE SELECT * FROM :ET_INB_DLV_EKEK ;
ET_INB_DLV_EKES = SELECT * FROM :ET_INB_DLV_EKES ORDER BY EBELN,EBELP,ETENS;
ET_INB_DLV_EKET = SELECT * FROM :ET_INB_DLV_EKET ORDER BY EBELN,EBELP,ETENR;
ET_INB_DLV_EKKO = SELECT * FROM :ET_INB_DLV_EKKO ORDER BY EBELN;
ET_INB_DLV_EKPO = SELECT * FROM :ET_INB_DLV_EKPO ORDER BY EBELN,EBELP;
SELECT COUNT(*) into counterRow FROM :ET_INB_DLV_EKPO ;

IF (counterRow > 0) THEN
/*se ho trovato ordini:
 
T_DIFF_EKES = SELECT a.EBELN, a.EBELP, (b.MENGE - b.DABMG) AS DIFF_EKES from :ET_INB_DLV_EKPO as a INNER JOIN :ET_INB_DLV_EKES as b ON a.EBELN = b.EBELN AND a.EBELP = b.EBELP AND EBTYP = '2';

T_DIFF_EKET = SELECT a.EBELN, a.EBELP, a.ETENR, (a.MENGE - a.WEMNG) AS DIFF_EKET from :ET_INB_DLV_EKET as a INNER JOIN :T_DIFF_EKES as b ON a.EBELN = b.EBELN AND a.EBELP = b.EBELP;

BEGIN
DECLARE DIFF_BY_ROW DECIMAL(14,3);
DECLARE DIFF_EKES DECIMAL(14,3);
DECLARE CURR_ETENR VARCHAR(4);
DECLARE CURSOR cursorEKET FOR SELECT * FROM :T_DIFF_EKET;
	FOR cursorRow AS cursorEKET DO
	
	SELECT SUM(DIFF_EKES) INTO DIFF_EKES FROM :T_DIFF_EKES WHERE EBELN = cursorRow.EBELN AND EBELP = cursorRow.EBELP;
	DIFF_BY_ROW := (cursorRow.DIFF_EKET - DIFF_EKES);
	
	CURR_ETENR := cursorRow.ETENR;
	INSERT INTO "AUPSUP_DATABASE.data.tables::T_OUT_INBOUND_DEL" SELECT a.MANDT, a.SYSID, a.EBELN, a.EBELP, a.MATNR, a.TXZ01, a.IDNLF, a.BSTAE, a.WERKS, a.MENGE, a.MEINS,DIFF_BY_ROW,b.EINDT from :ET_INB_DLV_EKPO as a INNER JOIN :ET_INB_DLV_EKET as b ON a.EBELN = b.EBELN AND a.EBELP = b.EBELP AND b.ETENR = :CURR_ETENR;
	
	IF(DIFF_BY_ROW > 0) THEN
	END IF;
	
	END FOR;
END;
 
 
 out_table = SELECT * FROM "AUPSUP_DATABASE.data.tables::T_OUT_INBOUND_DEL";
 out_table =SELECT a.MANDT, a.SYSID, a.EBELN, a.EBELP, a.MATNR, a.TXZ01, a.IDNLF, a.BSTAE, a.WERKS, a.MENGE,0 AS QUANT_SCHED, a.MEINS,b.EINDT from :ET_INB_DLV_EKPO as a INNER JOIN :ET_INB_DLV_EKET as b ON a.EBELN = b.EBELN AND a.EBELP = b.EBELP;
 END IF;
 */
 
 /*
 out_table =SELECT a.MANDT, a.SYSID, a.EBELN, a.EBELP, b.ETENR, a.MATNR, a.TXZ01, a.IDNLF, a.BSTAE, a.WERKS, a.MENGE,b.QUANT_SCHED AS QUANT_SCHED, a.MEINS,b.EINDT, b.XBLNR from :ET_INB_DLV_EKPO as a INNER JOIN 
 (SELECT table1.EBELP,table1.EBELN,table1.EINDT,table2.DIFF AS QUANT_SCHED, table1.ETENR, table2.XBLNR FROM :ET_INB_DLV_EKET as table1 
 INNER JOIN ( SELECT EBELN,EBELP,SUM(MENGE - DABMG) as DIFF FROM :ET_INB_DLV_EKES GROUP BY EBELN,EBELP) as table2 ON table1.EBELN = table2.EBELN AND table1.EBELP = table2.EBELP WHERE table2.DIFF >= 0) as b ON a.EBELN = b.EBELN AND a.EBELP = b.EBELP;*/
 
 out_table =SELECT a.MANDT, a.SYSID, a.EBELN, a.EBELP, b.ETENR, a.MATNR, a.TXZ01, a.IDNLF, a.BSTAE, a.WERKS, c.PLANT_DESCR as DESCR_WERKS, a.MENGE,(b.MENGE - b.WEMNG) AS QUANT_SCHED, a.MEINS,b.EINDT,d.LIFNR,d.NAME1 from :ET_INB_DLV_EKPO as a 
 INNER JOIN :ET_INB_DLV_EKET AS b ON a.EBELN = b.EBELN AND a.EBELP = b.EBELP 
 INNER JOIN "AUPSUP_DATABASE.data.tables::T_BU_PLANT" AS c ON a.WERKS = c.PLANT
 INNER JOIN :ET_INB_DLV_EKKO AS d ON a.EBELN = d.EBELN -- per estrarre il LIFNR sulle testate utile per invio mail
 WHERE (b.MENGE - b.WEMNG) >= 0;
 
 END IF;
 
 out_table = SELECT * FROM :out_table ORDER BY EINDT ASC;
 
END;