PROCEDURE "AUPSUP_DATABASE.data.procedures.Utils::GetConfirmStatus"(
    IN userid VARCHAR(250),
    IN IT_LIFNR TABLE (ELIFN NVARCHAR(10)), 
    IN IT_EBELN NVARCHAR(10),
    IN IT_EBELP VARCHAR(5),      
    IN IT_EKORG TABLE (EKORG NVARCHAR(4)),
    IN IT_MATNR TABLE (MATNR NVARCHAR(40)), 
    IN IT_EKGRP TABLE (EKGRP NVARCHAR(3)),
    IN IT_WERKS TABLE (EWERK NVARCHAR(4),DESCR NVARCHAR(255)),
    IN IT_BSTYP TABLE (BSTYP NVARCHAR(1)),
    IN I_SPRAS NVARCHAR(1),
    IN I_SCHED_EINDT_FROM VARCHAR(8),
    IN I_SCHED_EINDT_TO VARCHAR(8), 
    IN I_CREATE_EINDT_FROM VARCHAR(8), 
    IN I_CREATE_EINDT_TO VARCHAR(8), 
    IN IS_PREZZO NVARCHAR(1),
    IN IS_QUANTITA NVARCHAR(1),
    IN I_ETENR VARCHAR(4),
    OUT ET_APPROVE_EKKO_EKPO "AUPSUP_DATABASE.data.structures.SchedulingAgreement::APPROVE_EKKO_EKPO_Structure",
    OUT ET_APPROVE_EKES_EKET "AUPSUP_DATABASE.data.structures.SchedulingAgreement::APPROVE_EKES_EKET_Structure"
)
LANGUAGE SQLSCRIPT
SQL SECURITY INVOKER
AS
BEGIN

DECLARE counter INTEGER;
DECLARE out_anagrafica TABLE(METAID VARCHAR(50), DESCR NVARCHAR(255));
DECLARE out_lifnr TABLE(METAID VARCHAR(50), LIFNR NVARCHAR(10), DESCR NVARCHAR(35));

SELECT COUNT(*) into counter FROM :IT_LIFNR;
IF counter = 0 THEN
    CALL "AUPSUP_DATABASE.data.procedures.Utils::GetMetasupplierList"(:userid,:out_anagrafica,:out_lifnr);
    IT_LIFNR = SELECT LIFNR AS ELIFN FROM :out_lifnr;
END IF;

/*Controllo se le organizzazioni commerciali sono state passate dal servizio*/
SELECT COUNT(*) into counter FROM :IT_EKORG WHERE EKORG <> '';
IF counter = 0 THEN
      /* prendo le organizzazioni commerciali dell'utente connesso*/
      CALL "AUPSUP_DATABASE.data.procedures.Utils::GetUserPurchaseOrgs"(:userid,:IT_EKORG);
END IF;

/*estrazione dei PLANT (WERKS) dell'utente connesso bisogna capire dove prendere il SYSID*/
SELECT COUNT(*) into counter FROM :IT_WERKS;
IF counter = 0 THEN
    CALL "AUPSUP_DATABASE.data.procedures.Utils::GetUserPlants"(:userid,:IT_WERKS);
END IF;

IF I_SCHED_EINDT_FROM = '' THEN
    I_SCHED_EINDT_FROM := '19000101';
END IF;
IF I_SCHED_EINDT_TO = '' THEN
    I_SCHED_EINDT_TO := '20500101';
END IF;
IF I_CREATE_EINDT_FROM = '' THEN
    I_CREATE_EINDT_FROM := '19000101';
END IF;
IF I_CREATE_EINDT_TO = '' THEN
    I_CREATE_EINDT_TO := '20500101';
END IF;


IF IT_EBELN <> '' AND IT_EBELP <> '' THEN
    ET_APPROVE_EKKO_EKPO = SELECT * FROM "AUPSUP_DATABASE.data.tables::T_APPROVE_SAG_EKKO_EKPO" WHERE EBELN = :IT_EBELN AND EBELP = :IT_EBELP AND 
   (SELECT TO_DATE(TO_VARCHAR(CREATION_DATE, 'YYYYMMDD'),'YYYYMMDD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY") between (SELECT TO_DATE(:I_CREATE_EINDT_FROM, 'YYYYMMDD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY") AND 
      (SELECT TO_DATE(:I_CREATE_EINDT_TO, 'YYYYMMDD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY");
ELSE 
    IF IT_EBELN <> '' AND IT_EBELP = '' THEN
        ET_APPROVE_EKKO_EKPO = SELECT * FROM "AUPSUP_DATABASE.data.tables::T_APPROVE_SAG_EKKO_EKPO" WHERE EBELN = :IT_EBELN  AND 
   (SELECT TO_DATE(TO_VARCHAR(CREATION_DATE, 'YYYYMMDD'),'YYYYMMDD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY") between (SELECT TO_DATE(:I_CREATE_EINDT_FROM, 'YYYYMMDD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY") AND 
      (SELECT TO_DATE(:I_CREATE_EINDT_TO, 'YYYYMMDD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY");
    ELSE
        IF IT_EBELN = '' AND IT_EBELP = '' THEN
          ET_APPROVE_EKKO_EKPO = SELECT * FROM "AUPSUP_DATABASE.data.tables::T_APPROVE_SAG_EKKO_EKPO" WHERE
   (SELECT TO_DATE(TO_VARCHAR(CREATION_DATE, 'YYYYMMDD'),'YYYYMMDD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY") between (SELECT TO_DATE(:I_CREATE_EINDT_FROM, 'YYYYMMDD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY") AND 
      (SELECT TO_DATE(:I_CREATE_EINDT_TO, 'YYYYMMDD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY");
        END IF;
    END IF;
END IF;

SELECT COUNT(*) into counter FROM :IT_MATNR;
IF counter > 0 THEN
    ET_APPROVE_EKKO_EKPO = SELECT * FROM :ET_APPROVE_EKKO_EKPO WHERE MATNR IN (SELECT MATNR FROM :IT_MATNR);
END IF;

SELECT COUNT(*) into counter FROM :IT_WERKS;
IF counter > 0 THEN
    ET_APPROVE_EKKO_EKPO = SELECT * FROM :ET_APPROVE_EKKO_EKPO WHERE WERKS IN (SELECT EWERK FROM :IT_WERKS);
END IF;

SELECT COUNT(*) into counter FROM :IT_LIFNR;
IF counter > 0 THEN
    ET_APPROVE_EKKO_EKPO = SELECT * FROM :ET_APPROVE_EKKO_EKPO WHERE LIFNR IN (SELECT ELIFN FROM :IT_LIFNR);
END IF;

SELECT COUNT(*) into counter FROM :IT_EKORG;
IF counter > 0 THEN
    ET_APPROVE_EKKO_EKPO = SELECT * FROM :ET_APPROVE_EKKO_EKPO WHERE EKORG IN (SELECT EKORG FROM :IT_EKORG);
END IF;

SELECT COUNT(*) into counter FROM :IT_EKGRP;
IF counter > 0 THEN
    ET_APPROVE_EKKO_EKPO = SELECT * FROM :ET_APPROVE_EKKO_EKPO WHERE EKGRP IN (SELECT EKGRP FROM :IT_EKGRP);
END IF;

-- la parte di logs Ã¨ iniziata il 1 ottobre 2020
 ET_APPROVE_EKKO_EKPO = SELECT * FROM :ET_APPROVE_EKKO_EKPO WHERE CREATION_DATE > '2020-10-01';

SELECT COUNT(*) into counter FROM :ET_APPROVE_EKKO_EKPO;
IF counter > 0 THEN
    IF I_ETENR = '' THEN
        ET_APPROVE_EKES_EKET = SELECT a.* FROM "AUPSUP_DATABASE.data.tables::T_APPROVE_SAG_EKES_EKET" AS a WHERE (a.EBELN, a.EBELP) IN (SELECT EBELN, EBELP FROM :ET_APPROVE_EKKO_EKPO );
    ELSE
        ET_APPROVE_EKES_EKET = SELECT a.* FROM "AUPSUP_DATABASE.data.tables::T_APPROVE_SAG_EKES_EKET" AS a WHERE (a.EBELN, a.EBELP) IN (SELECT EBELN, EBELP FROM :ET_APPROVE_EKKO_EKPO ) AND a.ETENS = :I_ETENR;
    END IF;
END IF;

IF IS_PREZZO = '' THEN
    ET_APPROVE_EKES_EKET = SELECT * FROM :ET_APPROVE_EKES_EKET WHERE CONF_TYPE <> 'PRZ';
    ET_APPROVE_EKKO_EKPO = SELECT * FROM :ET_APPROVE_EKKO_EKPO WHERE CONF_TYPE <> 'PRZ';
END IF;

IF IS_QUANTITA = '' THEN
    ET_APPROVE_EKES_EKET = SELECT * FROM :ET_APPROVE_EKES_EKET WHERE CONF_TYPE <> 'QUA';
    ET_APPROVE_EKKO_EKPO = SELECT * FROM :ET_APPROVE_EKKO_EKPO WHERE CONF_TYPE <> 'QUA';
END IF;

END;
