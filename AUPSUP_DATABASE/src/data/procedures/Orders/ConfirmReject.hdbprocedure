PROCEDURE "AUPSUP_DATABASE.data.procedures.Orders::ConfirmReject"(
IN userid VARCHAR(250),
IN T_CONF_TYPE TABLE (EBELN NVARCHAR(10), EBELP VARCHAR(5), CONF_TYPE NVARCHAR(1), BSTYP NVARCHAR(1)), -- serve per quando conferma da RMO
IN TIPO_OPERAZIONE NVARCHAR(3), -- QUA o PRZ
IN NOTE NVARCHAR(500),
OUT E_RETURN "AUPSUP_DATABASE.data.structures.Orders::ERETURNStructure") 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER AS 
BEGIN 

DECLARE counter INT;
DECLARE IT_EKKO_CH "AUPSUP_DATABASE.data.structures.Orders::EKKO_ConfirmOrds";
DECLARE IT_EKPO_CH "AUPSUP_DATABASE.data.structures.Orders::EKPO_ConfirmOrds";
DECLARE IT_EKES_CH "AUPSUP_DATABASE.data.structures.Orders::EKES_ConfirmOrds";
DECLARE V_CURRENT_TIMESTAMP TIMESTAMP; 

CREATE LOCAL TEMPORARY TABLE #LIFNR (LIFNR NVARCHAR(10),EBELN NVARCHAR(10),EBELP VARCHAR(5));

SELECT CURRENT_TIMESTAMP INTO V_CURRENT_TIMESTAMP FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";

SELECT COUNT(*) INTO counter FROM :T_CONF_TYPE;
IF counter > 0 THEN

    --------------- UTTE LE POSIZIONI DA PPROVARE ---------------------------------

    IT_EKPO_CH = SELECT a.EBELN AS EBELN, a.EBELP AS EBELP, a.MENGE as MENGE, a.MEINS AS MEINS, a.NETPR AS NETPR, a.PEINH AS PEINH, a.KSCHL AS KSCHL, a.ZINVALIDITA AS ZINVALIDITA, a.ZFINVALIDATA AS ZFINVALIDATA, a.BPRME AS BPRME, a.BPUMZ AS BPUMZ, a.BPUMN AS BPUMN, a.UMREZ AS UMREZ, a.UMREN AS UMREN, a.UPDKZ AS UPDKZ, a.LABNR AS LABNR, a.ZMODPREZZO AS ZMODPREZZO, a.ZMODSCHED AS ZMODSCHED, a.ZINSCONF AS ZINSCONF, a.ZCONFPARZ AS ZCONFPARZ, a.BSTAE AS BSTAE FROM "AUPSUP_DATABASE.data.tables::T_APPROVE_SAG_EKKO_EKPO" as a 
    INNER JOIN :T_CONF_TYPE as b 
    ON a.EBELN = b.EBELN AND a.EBELP = b.EBELP AND a.BSTYP = b.BSTYP 
    WHERE a.STATUS = 'RC' AND b.CONF_TYPE = 'A' AND a.CONF_TYPE = :TIPO_OPERAZIONE;

    IT_EKES_CH = SELECT a.EBELN AS EBELN, a.EBELP AS EBELP, a.EBTYP AS EBTYP, a.EINDT AS EINDT, a.UZEIT AS UZEIT, a.LPEIN AS LPEIN, a.MENGE AS MENGE, a.XBLNR AS XBLNR FROM "AUPSUP_DATABASE.data.tables::T_APPROVE_SAG_EKES_EKET" as a 
    INNER JOIN :IT_EKPO_CH as b 
    ON a.EBELN = b.EBELN AND a.EBELP = b.EBELP;

    IT_EKKO_CH = SELECT a.BSTYP, a.EBELN AS EBELN, a.LIFNR AS LIFNR, '' AS ZCUSTOM01, '' AS ZCUSTOM02, '' AS ZCUSTOM03, '' AS ZCUSTOM04, '' AS ZCUSTOM05, '' AS ZCUSTOM06, '' AS ZCUSTOM07, '' AS ZCUSTOM08, '' AS ZCUSTOM09, '' AS ZCUSTOM10 FROM "AUPSUP_DATABASE.data.tables::T_APPROVE_SAG_EKKO_EKPO" as a 
    INNER JOIN :T_CONF_TYPE as b 
    ON a.EBELN = b.EBELN AND a.EBELP = b.EBELP AND a.BSTYP = b.BSTYP 
    WHERE a.STATUS = 'RC' AND b.CONF_TYPE = 'A' AND a.CONF_TYPE = :TIPO_OPERAZIONE;

    CALL "AUPSUP_DATABASE.data.procedures.Orders::MM00_CONFIRM_ORD" (:userid,:IT_EKKO_CH,:IT_EKPO_CH,:IT_EKES_CH,:E_RETURN);

    SELECT COUNT(*) INTO counter FROM :E_RETURN WHERE MSGTY = 'E';
    IF (counter = 0) THEN
        SELECT COUNT(*) into counter FROM :IT_EKPO_CH;
        IF (counter>0) THEN
            DELETE FROM "AUPSUP_DATABASE.data.tables::T_APPROVE_SAG_EKES_EKET" AS table1 WHERE (table1.EBELN,table1.EBELP) IN (SELECT EBELN,EBELP FROM :IT_EKPO_CH);
        END IF;						
    END IF;

    --------------- UTTE LE POSIZIONI DA RIFIUTARE ---------------------------------

    IT_EKPO_CH = SELECT a.EBELN AS EBELN, a.EBELP AS EBELP, a.MENGE as MENGE, a.MEINS AS MEINS, a.NETPR AS NETPR, a.PEINH AS PEINH, a.KSCHL AS KSCHL, a.ZINVALIDITA AS ZINVALIDITA, a.ZFINVALIDATA AS ZFINVALIDATA, a.BPRME AS BPRME, a.BPUMZ AS BPUMZ, a.BPUMN AS BPUMN, a.UMREZ AS UMREZ, a.UMREN AS UMREN, a.UPDKZ AS UPDKZ, a.LABNR AS LABNR, a.ZMODPREZZO AS ZMODPREZZO, a.ZMODSCHED AS ZMODSCHED, a.ZINSCONF AS ZINSCONF, a.ZCONFPARZ AS ZCONFPARZ, a.BSTAE AS BSTAE FROM "AUPSUP_DATABASE.data.tables::T_APPROVE_SAG_EKKO_EKPO" as a 
    INNER JOIN :T_CONF_TYPE as b 
    ON a.EBELN = b.EBELN AND a.EBELP = b.EBELP AND a.BSTYP = b.BSTYP 
    WHERE a.STATUS = 'RC' AND b.CONF_TYPE = 'R' AND a.CONF_TYPE = :TIPO_OPERAZIONE;

    BEGIN
        DECLARE CURSOR cursorApproveReject FOR SELECT * FROM :IT_EKPO_CH;

        FOR cursorRow AS cursorApproveReject DO
            UPDATE "AUPSUP_DATABASE.data.tables::T_APPROVE_SAG_EKKO_EKPO" SET STATUS = 'RF', MODIFY_STATUS_DATE = :V_CURRENT_TIMESTAMP WHERE EBELN = cursorRow.EBELN AND EBELP = cursorRow.EBELP;
            
            /*SEND NOTIFICATIONS*/
            /*cerco i plant delle posizioni verso le quali inviare le notifiche*/
            UPSERT #LIFNR SELECT DISTINCT LIFNR,EBELN,EBELP FROM "AUPSUP_DATABASE.data.tables::T_APPROVE_SAG_EKKO_EKPO" WHERE EBELN = cursorRow.EBELN AND EBELP = cursorRow.EBELP AND STATUS = 'RF';
                    
            /*SEND NOTIFICATIONS*/
            SELECT COUNT(*) INTO counter FROM #LIFNR;
            IF (counter>0) THEN
                BEGIN
                    DECLARE CURSOR cursorLIFNR FOR SELECT DISTINCT * FROM #LIFNR;
                    FOR cursorRowLIFNR AS cursorLIFNR DO
                        -- TODO AZ CALL "PORTAL"."it.alteaup.supplier.portal.notifications.storedProcedures::InsertNotification" (:userid,'',cursorRow.EBELN,'RMO','CRI','','','IT',cursorRowLIFNR.LIFNR,'',NOTEREJECT);
                    END FOR;
                END;
            END IF;		
            
            DELETE FROM "AUPSUP_DATABASE.data.tables::T_APPROVE_SAG_EKES_EKET" AS table1 WHERE (table1.EBELN,table1.EBELP) IN (SELECT EBELN,EBELP FROM :IT_EKPO_CH);			
            DELETE FROM #LIFNR;					
        END FOR;
    END;



ELSE
    E_RETURN = SELECT '' AS EBELN,'' AS EBELP,'E' AS MSGTY,'No Conf type found' AS MESSAGE,'' AS MSGNO,'' AS MSGID FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";
END IF;

DROP TABLE #LIFNR;

END;