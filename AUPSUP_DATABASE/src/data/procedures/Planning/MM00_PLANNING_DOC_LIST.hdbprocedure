PROCEDURE "AUPSUP_DATABASE.data.procedures.Planning::MM00_PLANNING_DOC_LIST"(
    IN userid VARCHAR(250),
    IN IT_EKORG TABLE (EKORG NVARCHAR(4)),
    IN IT_WERKS TABLE (EWERK NVARCHAR(4)),
    IN IT_EKGRP TABLE (EKGRP NVARCHAR(3)),
    IN IT_MATNR TABLE (MATNR NVARCHAR(40)),
    IN IT_EBELN NVARCHAR(10),
    IN IT_LIFNR TABLE (ELIFN NVARCHAR(10)),
    OUT out_table "AUPSUP_DATABASE.data.structures.Planning::OUT_PLANNINGStructure"
)
    LANGUAGE SQLSCRIPT
    SQL SECURITY INVOKER  AS 
    
BEGIN  

--DECLARE IT_DOC_EBELN TABLE (EBELN NVARCHAR(10));
DECLARE IT_CUST_FIELDS TABLE(
CUST_FIELD NVARCHAR(30),
SOURCE_TABLE NVARCHAR(30),
SOURCE_FIELD NVARCHAR(30)
);
DECLARE I_DOC_EGLKZ_P_EXCL NVARCHAR(1);
DECLARE I_DOC_ELIKZ_P_EXCL NVARCHAR(1);
DECLARE I_DOC_LOEKZ_K_EXCL NVARCHAR(1);
DECLARE I_DOC_LOEKZ_P_EXCL NVARCHAR(1);
DECLARE I_DOC_MEMORY_EXCL NVARCHAR(1);
DECLARE I_DOC_READ NVARCHAR(1);
DECLARE I_DOC_RETPO_P_EXCL NVARCHAR(1);
DECLARE I_DOC_WITH_EKEH NVARCHAR(1);
DECLARE I_DOC_WITH_EKEK NVARCHAR(1);
DECLARE I_DOC_WITH_EKES NVARCHAR(1);
DECLARE I_DOC_WITH_EKET NVARCHAR(1);
DECLARE I_DOC_WITH_EKKO NVARCHAR(1);
DECLARE I_DOC_WITH_EKPO NVARCHAR(1);
DECLARE I_REQ_EBAKZ_EXCL NVARCHAR(1);
DECLARE I_REQ_LOEKZ_EXCL NVARCHAR(1);
DECLARE I_REQ_MEMORY_EXCL NVARCHAR(1);
DECLARE I_REQ_READ NVARCHAR(1);
DECLARE counterRow INTEGER;
DECLARE metaid NVARCHAR(50);
/*DECLARE CURSOR cursorEKET FOR SELECT * FROM :T_DIFF_EKET;*/
DECLARE IT_DOC_BSART TABLE (ESART NVARCHAR(4));
DECLARE IT_DOC_BSTYP TABLE(BSTYP NVARCHAR(1));
DECLARE T_WERKS TABLE (EWERK NVARCHAR(4), DESCR NVARCHAR(255));
DECLARE IT_LIFNR_VENDOR TABLE (LIFNR NVARCHAR(10));

--DECLARE IT_REQ_BANFN TABLE (BANFN NVARCHAR(10));
--DECLARE IT_REQ_BSART TABLE (BBSRT NVARCHAR(4));
--DECLARE IT_VENDOR TABLE (LIFNR NVARCHAR(10),EKORG NVARCHAR(4));

DECLARE T_OUT_MATRN_SUM TABLE (NAME1 NVARCHAR(35),MATNR NVARCHAR(40),TXZ01 NVARCHAR(40),IDNLF NVARCHAR(35),MEINS NVARCHAR(3),
EBELN NVARCHAR(10),EBELP VARCHAR(5),WERKS NVARCHAR(4),
SOMMA DECIMAL(14,3), ZQUANTITA DECIMAL(14,3),BSTYP NVARCHAR(1));

DECLARE T_OUT_WEEK TABLE (MATNR NVARCHAR(40),
EBELN NVARCHAR(10),EBELP VARCHAR(5),
MENGE DECIMAL(14,3),I_WEEK INTEGER,BSTYP NVARCHAR(1));

DECLARE TODAY_DATE DATE;
DECLARE TODAY_DATE_MORE_6 DATE;
DECLARE TODAY_DATE_MORE_7 DATE;
DECLARE TODAY_DATE_MORE_12 DATE;
DECLARE TODAY_DATE_MORE_13 DATE;
DECLARE TODAY_DATE_MORE_18 DATE;
DECLARE TODAY_DATE_MORE_19 DATE;
DECLARE TODAY_DATE_MORE_24 DATE;
DECLARE TODAY_DATE_MORE_25 DATE;
DECLARE NEXT_MONT_1 DATE;
DECLARE NEXT_MONT_1_MORE_1 DATE;
DECLARE NEXT_MONT_2 DATE;
DECLARE NEXT_MONT_2_MORE_2 DATE;
DECLARE NEXT_MONT_3 DATE;
DECLARE NEXT_MONT_3_MORE_3 DATE;
DECLARE NEXT_MONT_4 DATE;
DECLARE NEXT_MONT_4_MORE_4 DATE;
DECLARE NEXT_MONT_5 DATE;
--DECLARE out_table TABLE(EBELN NVARCHAR(10),EBELP VARCHAR(4),EINDT DATE, SOMMA_WK_1 DECIMAL(14,3) );
/*TABELLA che contiene i LIFNR del buyer*/
DECLARE BUYER_LIFNR "AUPSUP_DATABASE.data.structures.Orders::MM00_VENDOR_LIST_ET_VENDORStructure";

DECLARE CURRENT_SYSID NVARCHAR(30);

/*Inizializzazione a SPACE per campi attualmente non utilizzati*/
create local temporary table #IT_REQ_BANFN (BANFN NVARCHAR(10));
create local temporary table #IT_REQ_BSART (BBSRT NVARCHAR(4));
create local temporary table #IT_VENDOR (LIFNR NVARCHAR(10),EKORG NVARCHAR(4));
create local temporary table #IT_LIFNR_VENDOR (LIFNR NVARCHAR(10));
create local temporary table #IT_DOC_EBELN (EBELN NVARCHAR(10));

/*inizializzazione tabelle input*/
I_DOC_EGLKZ_P_EXCL:='X';
I_DOC_ELIKZ_P_EXCL:='X';
I_DOC_LOEKZ_K_EXCL:='X';
I_DOC_LOEKZ_P_EXCL:='X';
I_DOC_MEMORY_EXCL:='X';
I_DOC_READ :='X';
I_DOC_RETPO_P_EXCL:='X';
I_DOC_WITH_EKEH:='X';
I_DOC_WITH_EKEK:='X';
I_DOC_WITH_EKES:='X';
I_DOC_WITH_EKET:='X';
I_DOC_WITH_EKKO:='X';
I_DOC_WITH_EKPO:='X';
I_REQ_EBAKZ_EXCL :='X';
I_REQ_LOEKZ_EXCL:='X';
I_REQ_MEMORY_EXCL:='X';
I_REQ_READ:='X';

/*PRENDO IL SYD DA PASSARE AL SERVIZIO*/
SELECT SYSID INTO CURRENT_SYSID FROM "AUPSUP_DATABASE.data.tables::T_BCKND_SYSTEMS";

IT_REQ_BANFN = SELECT * FROM #IT_REQ_BANFN;
IT_REQ_BSART = SELECT * FROM #IT_REQ_BSART;
IT_VENDOR = SELECT * FROM #IT_VENDOR;
IT_LIFNR_VENDOR = SELECT * FROM #IT_LIFNR_VENDOR;

IF IT_EBELN = '' THEN
    BEGIN
       -- IT_DOC_EBELN = SELECT * FROM "PORTAL"."T_MM00_PURDOC_LIST_IT_EBELN";
        
        /*Controllo se le organizzazioni commerciali sono state passate dal servizio*/
        SELECT COUNT(*) into counterRow FROM :IT_EKORG WHERE EKORG <> '';
        IF counterRow = 0 THEN
            /* prendo le organizzazioni commerciali dell'utente connesso*/
            CALL "AUPSUP_DATABASE.data.procedures.Utils::GetUserPurchaseOrgs"(:userid,:IT_EKORG);
        END IF;
        
        /*Controllo che non siano stati passati lifnr in input*/
        SELECT COUNT(*) into counterRow FROM :IT_LIFNR;
        IF (counterRow = 0) THEN
        
            /*estrazione dei fornitori se ho un metafornitore quindi sono un supplier*/
            SELECT COUNT(*) into counterRow FROM "AUPSUP_DATABASE.data.tables::T_USERID_METAID"
            WHERE USERID = :userid;
            
            IF (counterRow > 0) THEN
            /*SONO SUPPLIER*/
                SELECT METAID into metaid FROM "AUPSUP_DATABASE.data.tables::T_USERID_METAID"
                WHERE USERID = :userid;
                
                IT_LIFNR = SELECT DISTINCT LIFNR AS ELIFN
                FROM "AUPSUP_DATABASE.data.tables::T_METAID_FORN"
                WHERE METAID = :metaid;
                
            ELSE
                /*SONO BUYER: chiamo la bapi per avere tutti i "miei fornitori"*/
                -- faccio un pre filtro con tutti i fornitori legati ai metasupplier attivi che ci sono sul portale
            	IT_LIFNR_VENDOR = SELECT a.LIFNR as LIFNR FROM "AUPSUP_DATABASE.data.tables::T_METAID_FORN" AS a 
            	INNER JOIN (SELECT METAID FROM "AUPSUP_DATABASE.data.tables::T_METASUPPLIER_DATA" WHERE ATTIVO = 1) as b ON a.METAID = b.METAID;
            	
                CALL "AUPSUP_DATABASE.data.procedures.Orders::MM00_VENDOR_LIST"(:userid,'','',:IT_LIFNR_VENDOR,:IT_EKORG,:BUYER_LIFNR);
                select COUNT(*) into counterRow FROM :IT_EKORG;
                IF (counterRow > 0) THEN
                    IT_LIFNR = SELECT DISTINCT LIFNR AS ELIFN FROM :BUYER_LIFNR WHERE EKORG IN (select EKORG FROM :IT_EKORG);
                ELSE
                    IT_LIFNR = SELECT DISTINCT LIFNR AS ELIFN FROM :BUYER_LIFNR;
                END IF;
            END IF;
        
        END IF;

    END;
ELSE
    IT_DOC_EBELN = SELECT IT_EBELN AS EBELN FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";
END IF;

IT_CUST_FIELDS = SELECT * FROM "AUPSUP_DATABASE.data.tables::T_IT_CUST_FIELDS";

IT_DOC_BSART = SELECT BSART AS ESART FROM "AUPSUP_DATABASE.data.tables::T_ORDERS_TYPES" WHERE PLANNING = 'X';
IT_DOC_BSTYP = SELECT DISTINCT BSTYP FROM "AUPSUP_DATABASE.data.tables::T_ORDERS_TYPES" WHERE PLANNING = 'X';

/*estrazione dei PLANT (WERKS) dell'utente connesso bisogna capire dove prendere il SYSID*/
SELECT COUNT(*) into counterRow FROM :IT_WERKS WHERE EWERK <> '';
IF counterRow = 0 THEN
CALL "AUPSUP_DATABASE.data.procedures.Utils::GetUserPlants"(:userid,:T_WERKS);
IT_WERKS = SELECT EWERK FROM :T_WERKS;
END IF;

/*richiamo della bapi tramite virtual procedures*/ -- TODO VIRTUAL PROCEDURES
--CALL "PORTAL"."VIRTUAL_MM00_PLANNING_DOC_LIST"(:IT_CUST_FIELDS,:IT_DOC_BSART,:IT_DOC_BSTYP,:IT_DOC_EBELN,:IT_EKGRP,:IT_EKORG,:IT_LIFNR,:IT_MATNR,#IT_REQ_BANFN,:IT_REQ_BSART,:IT_VENDOR,:IT_WERKS,:I_DOC_EGLKZ_P_EXCL,:I_DOC_ELIKZ_P_EXCL,:I_DOC_LOEKZ_K_EXCL,:I_DOC_LOEKZ_P_EXCL,:I_DOC_MEMORY_EXCL,:I_DOC_READ,:I_DOC_RETPO_P_EXCL,:I_DOC_WITH_EKEH,:I_DOC_WITH_EKEK,:I_DOC_WITH_EKES,:I_DOC_WITH_EKET,:I_DOC_WITH_EKKO,:I_DOC_WITH_EKPO,:I_REQ_EBAKZ_EXCL,:I_REQ_LOEKZ_EXCL,:I_REQ_MEMORY_EXCL,:I_REQ_READ,:ET_PLANNING_EBAN,:ET_PLANNING_EKEH,:ET_PLANNING_EKEK,:ET_PLANNING_EKES,:ET_PLANNING_EKET,:ET_PLANNING_EKKO,:ET_PLANNING_EKPO);
/*
SELECT * FROM :ET_PLANNING_EBAN;
SELECT * FROM :ET_PLANNING_EKEH;
SELECT * FROM :ET_PLANNING_EKEK;
SELECT * FROM :ET_PLANNING_EKES;
SELECT * FROM :ET_PLANNING_EKET;
SELECT * FROM :ET_PLANNING_EKKO;
SELECT COUNT(*) into counterRow FROM :ET_PLANNING_EKPO;

IF (counterRow > 0) THEN
-- preparo le date a partire da oggi per settimana
SELECT CURRENT_DATE INTO TODAY_DATE FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";
SELECT ADD_DAYS (TO_DATE (TODAY_DATE, 'YYYY-MM-DD'), 6) INTO TODAY_DATE_MORE_6 FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";
SELECT ADD_DAYS (TO_DATE (TODAY_DATE_MORE_6, 'YYYY-MM-DD'), 1) INTO TODAY_DATE_MORE_7 FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";
SELECT ADD_DAYS (TO_DATE (TODAY_DATE_MORE_7, 'YYYY-MM-DD'), 6) INTO TODAY_DATE_MORE_12 FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";
SELECT ADD_DAYS (TO_DATE (TODAY_DATE_MORE_12, 'YYYY-MM-DD'), 1) INTO TODAY_DATE_MORE_13 FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";
SELECT ADD_DAYS (TO_DATE (TODAY_DATE_MORE_13, 'YYYY-MM-DD'), 6) INTO TODAY_DATE_MORE_18 FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";
SELECT ADD_DAYS (TO_DATE (TODAY_DATE_MORE_18, 'YYYY-MM-DD'), 1) INTO TODAY_DATE_MORE_19 FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";
SELECT ADD_DAYS (TO_DATE (TODAY_DATE_MORE_19, 'YYYY-MM-DD'), 6) INTO TODAY_DATE_MORE_24 FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";
-- preparo le date a partire da oggi per prossimi 5 mesi
SELECT ADD_DAYS (TO_DATE (TODAY_DATE_MORE_24, 'YYYY-MM-DD'), 1) INTO TODAY_DATE_MORE_25 FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";
SELECT ADD_DAYS (TO_DATE (TODAY_DATE_MORE_25, 'YYYY-MM-DD'), 30) INTO NEXT_MONT_1 FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";
SELECT ADD_DAYS (TO_DATE (NEXT_MONT_1, 'YYYY-MM-DD'), 1) INTO NEXT_MONT_1_MORE_1 FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";
SELECT ADD_DAYS (TO_DATE (NEXT_MONT_1_MORE_1, 'YYYY-MM-DD'), 30) INTO NEXT_MONT_2 FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";
SELECT ADD_DAYS (TO_DATE (NEXT_MONT_2, 'YYYY-MM-DD'), 1) INTO NEXT_MONT_2_MORE_2 FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";
SELECT ADD_DAYS (TO_DATE (NEXT_MONT_2_MORE_2, 'YYYY-MM-DD'), 30) INTO NEXT_MONT_3 FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";
SELECT ADD_DAYS (TO_DATE (NEXT_MONT_3, 'YYYY-MM-DD'), 1) INTO NEXT_MONT_3_MORE_3 FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";
SELECT ADD_DAYS (TO_DATE (NEXT_MONT_3_MORE_3, 'YYYY-MM-DD'), 30) INTO NEXT_MONT_4 FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";
SELECT ADD_DAYS (TO_DATE (NEXT_MONT_4, 'YYYY-MM-DD'), 1) INTO NEXT_MONT_4_MORE_4 FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";
SELECT ADD_DAYS (TO_DATE (NEXT_MONT_4_MORE_4, 'YYYY-MM-DD'), 30) INTO NEXT_MONT_5 FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";

out_table =

SELECT ekpo.MANDT as MANDT,ekpo.SYSID as SYSID,ekpo.MATNR as MATNR,ekpo.TXZ01 as TXZ01,ekpo.WERKS as WERKS,t_plant.PLANT_DESCR AS WERKS_DESCR,ekpo.MENGE as MENGE,ekpo.MEINS as MEINS,
ekko.LIFNR as LIFNR,ekpo.EBELN as EBELN,ekpo.EBELP as EBELP,ekpo.KONNR as KONNR,ekpo.KTPNR as KTPNR,ekpo.BSTYP as BSTYP,ekko.NAME1 as NAME1,
ekpo.ZQUANTITA as ZQUANTITA,t_wk1.SOMMA_WK_1 AS SOMMA_WK1,t_wk2.SOMMA_WK_2 AS SOMMA_WK2,t_wk3.SOMMA_WK_3 AS SOMMA_WK3,t_wk4.SOMMA_WK_4 AS SOMMA_WK4,
t_mn1.SOMMA_MN_1 AS SOMMA_MN1,t_mn2.SOMMA_MN_2 AS SOMMA_MN2,t_mn3.SOMMA_MN_3 AS SOMMA_MN3,t_mn4.SOMMA_MN_4 AS SOMMA_MN4,t_mn5.SOMMA_MN_5 AS SOMMA_MN5,
t_pregresso.PREGRESSO AS PREGRESSO
FROM :ET_PLANNING_EKPO as ekpo
-- estraggo dalla eket per tipo ordine F la somma del menge - wemeng pregresso
LEFT JOIN ( 
SELECT a.EBELN,a.EBELP,SUM(b.MENGE - b.WEMNG) AS PREGRESSO FROM :ET_PLANNING_EKPO as a
INNER JOIN :ET_PLANNING_EKET AS b
ON a.EBELN = b.EBELN and a.EBELP = b.EBELP
WHERE a.BSTYP = 'F' and TODAY_DATE > (SELECT TO_VARCHAR(TO_DATE(b.EINDT, 'YYYYMMDD'), 'YYYY-MM-DD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY")
GROUP BY a.EBELN,a.EBELP
) as t_pregresso ON ekpo.EBELN = t_pregresso.EBELN and ekpo.EBELP = t_pregresso.EBELP
LEFT JOIN (
-- estraggo dalla eket per tipo ordine F la somma del menge - wemeng per data tra oggi e prossimi 6 gg
SELECT a.EBELN,a.EBELP,(SELECT TO_VARCHAR(TO_DATE(b.EINDT, 'YYYYMMDD'), 'YYYY-MM-DD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY") as EINDT, SUM(b.MENGE - b.WEMNG) AS SOMMA_WK_1 FROM :ET_PLANNING_EKPO as a
INNER JOIN :ET_PLANNING_EKET AS b
ON a.EBELN = b.EBELN and a.EBELP = b.EBELP
WHERE a.BSTYP = 'F' and EINDT between TODAY_DATE and TODAY_DATE_MORE_6
GROUP BY a.EBELN,a.EBELP,EINDT
) as t_wk1 ON ekpo.EBELN = t_wk1.EBELN and ekpo.EBELP = t_wk1.EBELP
-- estraggo dalla eket per tipo ordine F la somma del menge - wemeng per data tra prossimi 6 gg prossimi 12 gg
LEFT JOIN (
SELECT a.EBELN,a.EBELP,SUM(b.MENGE - b.WEMNG) AS SOMMA_WK_2 FROM :ET_PLANNING_EKPO as a
INNER JOIN :ET_PLANNING_EKET AS b
ON a.EBELN = b.EBELN and a.EBELP = b.EBELP
WHERE a.BSTYP = 'F' and (SELECT TO_VARCHAR(TO_DATE(b.EINDT, 'YYYYMMDD'), 'YYYY-MM-DD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY")  between TODAY_DATE_MORE_7 and TODAY_DATE_MORE_12
GROUP BY a.EBELN,a.EBELP
) as t_wk2 ON ekpo.EBELN = t_wk2.EBELN and ekpo.EBELP = t_wk2.EBELP
-- estraggo dalla eket per tipo ordine F la somma del menge - wemeng per data tra prossimi 12 gg prossimi 18 gg
LEFT JOIN (
SELECT a.EBELN,a.EBELP,SUM(b.MENGE - b.WEMNG) AS SOMMA_WK_3 FROM :ET_PLANNING_EKPO as a
INNER JOIN :ET_PLANNING_EKET AS b
ON a.EBELN = b.EBELN and a.EBELP = b.EBELP
WHERE a.BSTYP = 'F' and (SELECT TO_VARCHAR(TO_DATE(b.EINDT, 'YYYYMMDD'), 'YYYY-MM-DD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY")  between TODAY_DATE_MORE_13 and TODAY_DATE_MORE_18
GROUP BY a.EBELN,a.EBELP
) as t_wk3 ON ekpo.EBELN = t_wk3.EBELN and ekpo.EBELP = t_wk3.EBELP
-- estraggo dalla eket per tipo ordine F la somma del menge - wemeng per data tra prossimi 18 gg prossimi 24 gg
LEFT JOIN (
SELECT a.EBELN,a.EBELP,SUM(b.MENGE - b.WEMNG) AS SOMMA_WK_4 FROM :ET_PLANNING_EKPO as a
INNER JOIN :ET_PLANNING_EKET AS b
ON a.EBELN = b.EBELN and a.EBELP = b.EBELP
WHERE a.BSTYP = 'F' and (SELECT TO_VARCHAR(TO_DATE(b.EINDT, 'YYYYMMDD'), 'YYYY-MM-DD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY")  between TODAY_DATE_MORE_19 and TODAY_DATE_MORE_24
GROUP BY a.EBELN,a.EBELP
) as t_wk4 ON ekpo.EBELN = t_wk4.EBELN and ekpo.EBELP = t_wk4.EBELP
-- estraggo dalla eket per tipo ordine F la somma del menge - wemeng per data tra prossimi 24 gg + 30 gg
LEFT JOIN (
SELECT a.EBELN,a.EBELP,SUM(b.MENGE - b.WEMNG) AS SOMMA_MN_1 FROM :ET_PLANNING_EKPO as a
INNER JOIN :ET_PLANNING_EKET AS b
ON a.EBELN = b.EBELN and a.EBELP = b.EBELP
WHERE a.BSTYP = 'F' and (SELECT TO_VARCHAR(TO_DATE(b.EINDT, 'YYYYMMDD'), 'YYYY-MM-DD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY")  between TODAY_DATE_MORE_25 and NEXT_MONT_1
GROUP BY a.EBELN,a.EBELP
) as t_mn1 ON ekpo.EBELN = t_mn1.EBELN and ekpo.EBELP = t_mn1.EBELP
-- estraggo dalla eket per tipo ordine F la somma del menge - wemeng per data 2 mesi dopo
LEFT JOIN (
SELECT a.EBELN,a.EBELP,SUM(b.MENGE - b.WEMNG) AS SOMMA_MN_2 FROM :ET_PLANNING_EKPO as a
INNER JOIN :ET_PLANNING_EKET AS b
ON a.EBELN = b.EBELN and a.EBELP = b.EBELP
WHERE a.BSTYP = 'F' and (SELECT TO_VARCHAR(TO_DATE(b.EINDT, 'YYYYMMDD'), 'YYYY-MM-DD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY")  between NEXT_MONT_1_MORE_1 and NEXT_MONT_2
GROUP BY a.EBELN,a.EBELP
) as t_mn2 ON ekpo.EBELN = t_mn2.EBELN and ekpo.EBELP = t_mn2.EBELP
-- estraggo dalla eket per tipo ordine F la somma del menge - wemeng per data 3 mesi dopo
LEFT JOIN (
SELECT a.EBELN,a.EBELP,SUM(b.MENGE - b.WEMNG) AS SOMMA_MN_3 FROM :ET_PLANNING_EKPO as a
INNER JOIN :ET_PLANNING_EKET AS b
ON a.EBELN = b.EBELN and a.EBELP = b.EBELP
WHERE a.BSTYP = 'F' and (SELECT TO_VARCHAR(TO_DATE(b.EINDT, 'YYYYMMDD'), 'YYYY-MM-DD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY")  between NEXT_MONT_2_MORE_2 and NEXT_MONT_3
GROUP BY a.EBELN,a.EBELP
) as t_mn3 ON ekpo.EBELN = t_mn3.EBELN and ekpo.EBELP = t_mn3.EBELP
-- estraggo dalla eket per tipo ordine F la somma del menge - wemeng per data 4 mesi dopo
LEFT JOIN (
SELECT a.EBELN,a.EBELP,SUM(b.MENGE - b.WEMNG) AS SOMMA_MN_4 FROM :ET_PLANNING_EKPO as a
INNER JOIN :ET_PLANNING_EKET AS b
ON a.EBELN = b.EBELN and a.EBELP = b.EBELP
WHERE a.BSTYP = 'F' and (SELECT TO_VARCHAR(TO_DATE(b.EINDT, 'YYYYMMDD'), 'YYYY-MM-DD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY")  between NEXT_MONT_3_MORE_3 and NEXT_MONT_4
GROUP BY a.EBELN,a.EBELP
) as t_mn4 ON ekpo.EBELN = t_mn4.EBELN and ekpo.EBELP = t_mn4.EBELP
-- estraggo dalla eket per tipo ordine F la somma del menge - wemeng per data 5 mesi dopo
LEFT JOIN (
SELECT a.EBELN,a.EBELP,SUM(b.MENGE - b.WEMNG) AS SOMMA_MN_5 FROM :ET_PLANNING_EKPO as a
INNER JOIN :ET_PLANNING_EKET AS b
ON a.EBELN = b.EBELN and a.EBELP = b.EBELP
WHERE a.BSTYP = 'F' and (SELECT TO_VARCHAR(TO_DATE(b.EINDT, 'YYYYMMDD'), 'YYYY-MM-DD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY")  between NEXT_MONT_4_MORE_4 and NEXT_MONT_5
GROUP BY a.EBELN,a.EBELP
) as t_mn5 ON ekpo.EBELN = t_mn5.EBELN and ekpo.EBELP = t_mn5.EBELP

INNER JOIN :ET_PLANNING_EKKO as ekko ON ekko.EBELN = ekpo.EBELN
INNER JOIN "PORTAL"."T_BU_PLANT" as t_plant ON ekpo.WERKS = t_plant.PLANT
UNION

-- righe PREVISIONALI
SELECT eban.MANDT as MANDT,eban.SYSID as SYSID,eban.MATNR as MATNR,eban.TXZ01 as TXZ01,eban.WERKS as WERKS,t_plant.PLANT_DESCR AS WERKS_DESCR,
eban.MENGE as MENGE,eban.MEINS as MEINS,
eban.LIFNR as LIFNR,'' as EBELN,'' as EBELP,eban.KONNR as KONNR,eban.KTPNR as KTPNR,'B' as BSTYP,eban.NAME1 as NAME1,
null as ZQUANTITA,

(CASE WHEN (SELECT TO_VARCHAR(TO_DATE(LFDAT, 'YYYYMMDD'), 'YYYY-MM-DD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY") between TODAY_DATE and TODAY_DATE_MORE_6
         THEN MENGE - BSMNG
    END
    ) AS SOMMA_WK_1,


(CASE WHEN (SELECT TO_VARCHAR(TO_DATE(LFDAT, 'YYYYMMDD'), 'YYYY-MM-DD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY") between TODAY_DATE_MORE_6 and TODAY_DATE_MORE_12
         THEN MENGE - BSMNG
    END
    ) SOMMA_WK2,
(CASE WHEN (SELECT TO_VARCHAR(TO_DATE(LFDAT, 'YYYYMMDD'), 'YYYY-MM-DD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY") between TODAY_DATE_MORE_12 and TODAY_DATE_MORE_18
         THEN MENGE - BSMNG
    END
    ) SOMMA_WK3,
(CASE WHEN (SELECT TO_VARCHAR(TO_DATE(LFDAT, 'YYYYMMDD'), 'YYYY-MM-DD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY") between TODAY_DATE_MORE_18 and TODAY_DATE_MORE_24
         THEN MENGE - BSMNG
    END
    ) AS SOMMA_WK4,
-- mesi
(CASE WHEN (SELECT TO_VARCHAR(TO_DATE(LFDAT, 'YYYYMMDD'), 'YYYY-MM-DD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY") between TODAY_DATE_MORE_24 and NEXT_MONT_1
         THEN MENGE - BSMNG
    END
    ) AS SOMMA_MN1,
(CASE WHEN (SELECT TO_VARCHAR(TO_DATE(LFDAT, 'YYYYMMDD'), 'YYYY-MM-DD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY") between NEXT_MONT_1 and NEXT_MONT_2
         THEN MENGE - BSMNG
    END
    ) AS SOMMA_MN2,
(CASE WHEN (SELECT TO_VARCHAR(TO_DATE(LFDAT, 'YYYYMMDD'), 'YYYY-MM-DD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY") between NEXT_MONT_2 and NEXT_MONT_3
         THEN MENGE - BSMNG
    END
    ) AS SOMMA_MN3,
(CASE WHEN (SELECT TO_VARCHAR(TO_DATE(LFDAT, 'YYYYMMDD'), 'YYYY-MM-DD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY") between NEXT_MONT_3 and NEXT_MONT_4
         THEN MENGE - BSMNG
    END
    ) AS SOMMA_MN4,
(CASE WHEN (SELECT TO_VARCHAR(TO_DATE(LFDAT, 'YYYYMMDD'), 'YYYY-MM-DD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY") between NEXT_MONT_4 and NEXT_MONT_5
         THEN MENGE - BSMNG
    END
    ) AS SOMMA_MN5,  
(CASE WHEN TODAY_DATE > (SELECT TO_VARCHAR(TO_DATE(LFDAT, 'YYYYMMDD'), 'YYYY-MM-DD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY")
         THEN MENGE - BSMNG
    END
    ) AS PREGRESSO
FROM :ET_PLANNING_EBAN as eban

INNER JOIN "PORTAL"."T_BU_PLANT" as t_plant ON eban.WERKS = t_plant.PLANT;



END IF;
*/

out_table = select * from :out_table;

DROP TABLE #IT_REQ_BANFN;
DROP TABLE #IT_REQ_BSART;
DROP TABLE #IT_VENDOR;
DROP TABLE #IT_LIFNR_VENDOR;
DROP TABLE #IT_DOC_EBELN;

END;