PROCEDURE "AUPSUP_DATABASE.data.procedures.SchedulingAgreement::SchedulationsCalculator" ( 
IN userid NVARCHAR(250),
IN IT_EBELN NVARCHAR(10),
IN IT_EBELP VARCHAR(5),
IN I_BSTYP NVARCHAR(1),
IN I_BSART VARCHAR(4),
IN I_EBTYP VARCHAR(4),
IN NEW_EKES TABLE (EBELN NVARCHAR(10), EBELP VARCHAR(5),EINDT VARCHAR(8),MENGE DECIMAL(14,3)),
OUT OUT_TABLE TABLE (EBELN NVARCHAR(10), EBELP VARCHAR(5),EINDT VARCHAR(8),MENGE DECIMAL(14,3),QTA_APERTA DECIMAL(14,3),PROG_RICHIESTO DECIMAL(14,3),PROG_CONFERMA DECIMAL(14,3))
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER AS
BEGIN

DECLARE GG_ESTRAZIONE INTEGER DEFAULT 0;
DECLARE TODAY_DATE DATE;
DECLARE END_DATE DATE;
DECLARE COUNTER INTEGER;
DECLARE SINGLE_SCHED TABLE (EBELN NVARCHAR(10), EBELP VARCHAR(5),EINDT VARCHAR(8),MENGE DECIMAL(14,3),QTA_APERTA DECIMAL(14,3),PROG_RICHIESTO DECIMAL(14,3),PROG_CONFERMA DECIMAL(14,3));
DECLARE EKPO_ABDAT VARCHAR(8);

SELECT ABDAT INTO EKPO_ABDAT FROM "AUPSUP_DATABASE.data.tables::ET_SAG_EKPO" WHERE EBELN = :IT_EBELN and EBELP = :IT_EBELP;
IF EKPO_ABDAT = '00000000' THEN -- se ABDAT Ã¨ 00000000 prendo tutte le schedulazioni
    EKPO_ABDAT = '19000101';
END IF;

-- prendo i giorni di estrazione dalla tabella di customizing
SELECT GG_ESTRAZIONE INTO GG_ESTRAZIONE FROM "AUPSUP_DATABASE.data.tables::T_ORDERS_TYPES" WHERE BSTYP = :I_BSTYP AND BSART = :I_BSART;

SELECT CURRENT_DATE INTO TODAY_DATE FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";
-- sommo alla data di oggi i giorni inseriti nella tabella di customizing 
SELECT ADD_DAYS (TO_DATE (TODAY_DATE, 'YYYY-MM-DD'), :GG_ESTRAZIONE) INTO END_DATE FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";

-- estraggo tutte le eket - ekeh che hanno data EINDT < data di oggi + giorni estrazione
OUT_TABLE = 
SELECT EBELN, EBELP, EINDT,MENGE,(MENGE - WEMNG) AS QTA_APERTA, 0 as PROG_RICHIESTO, 0 as PROG_CONFERMA FROM "AUPSUP_DATABASE.data.tables::ET_SAG_EKEH" WHERE (SELECT TO_VARCHAR(TO_DATE(EINDT, 'YYYYMMDD'), 'YYYY-MM-DD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY")  < END_DATE AND EBELN = :IT_EBELN AND EBELP = :IT_EBELP
UNION
SELECT EBELN, EBELP, EINDT,MENGE, (MENGE - WEMNG) AS QTA_APERTA, 0 as PROG_RICHIESTO, 0 as PROG_CONFERMA FROM "AUPSUP_DATABASE.data.tables::ET_SAG_EKET" WHERE (SELECT TO_VARCHAR(TO_DATE(EINDT, 'YYYYMMDD'), 'YYYY-MM-DD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY")  < END_DATE AND EBELN = :IT_EBELN AND EBELP = :IT_EBELP
ORDER BY EINDT ASC;

/*SELECT COUNT(*) INTO COUNTER FROM :NEW_EKES;
IF COUNTER > 0 THEN
    OUT_TABLE = SELECT * FROM :OUT_TABLE 
        UNION
    SELECT EBELN,EBELP,EINDT,MENGE, 0 AS QTA_APERTA, 0 as PROG_RICHIESTO, 0 as PROG_CONFERMA FROM :NEW_EKES ORDER BY EINDT;
    OUT_TABLE = SELECT EBELN, EBELP, EINDT,SUM(MENGE) as MENGE,SUM(QTA_APERTA) AS QTA_APERTA, 0 as PROG_RICHIESTO, 0 as PROG_CONFERMA FROM :OUT_TABLE GROUP BY EBELN,EBELP,EINDT;
END IF;
*/

--Progressivo richiesto
/*
Per la prima schedulazione esposta il calcolo utilizza EKPO-ZENTRATA e EKET-MENGE (o EKEH-MENGE) 
Per la seconda schedulazione in poi: sommare il progressivo calPROG_CONFERMAto alla precedente schedulazione + EKET-MENGE (o EKEH-MENGE) della schedulazione in essere del calcolo */
OUT_TABLE = SELECT a.EBELN,a.EBELP,a.EINDT,a.MENGE,a.QTA_APERTA,(b.ZENTRATA + a.MENGE) as PROG_RICHIESTO, null as PROG_CONFERMA FROM :OUT_TABLE as a INNER JOIN 
"AUPSUP_DATABASE.data.tables::ET_SAG_EKPO" AS b ON a.EBELN = b.EBELN AND a.EBELP = b.EBELP;

-- aggrego la SOMMA MENGE per DATA (somma delle EKES-MENGE se esiste/esistono un/delle conferma/e alla stessa data della riga)
OUT_TABLE = SELECT a.EBELN,a.EBELP,a.EINDT, b.SOMMA as MENGE,a.QTA_APERTA,a.PROG_RICHIESTO,a.PROG_CONFERMA FROM :OUT_TABLE as a INNER JOIN 
(SELECT EBELN,EBELP,EINDT,SUM(MENGE) as SOMMA FROM :OUT_TABLE GROUP BY EBELN,EBELP,EINDT) as b ON a.EBELN = a.EBELN and a.EBELP = b.EBELP and a.EINDT = b.EINDT;

--Progressivo Conferma
/*
Per ogni schedulazione mostrata (riga di EKET o EKES). Calcolare il progressivo conferma usando tutte le conferme da back end o in corso di approvazione che abbiamo: 
- EKES-EIND <= della data di schedulazione  
EKES-EIND > EKPO-ABDAT 
di queste sommare EKES-MENGE 
*/

SELECT COUNT(*) INTO COUNTER FROM :OUT_TABLE;
IF COUNTER > 0 AND I_EBTYP <> '' THEN

OUT_TABLE = SELECT t1.EBELN,t1.EBELP,t1.EINDT,t1.MENGE,t1.QTA_APERTA,t1.PROG_RICHIESTO, (COALESCE((
    SELECT SUM(MENGE) FROM "AUPSUP_DATABASE.data.tables::ET_SAG_EKES" WHERE EBTYP = :I_EBTYP AND EBELN = t1.EBELN AND EBELP = t1.EBELP AND
         (SELECT TO_DATE(EINDT, 'YYYYMMDD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY") <= (SELECT TO_DATE(t1.EINDT, 'YYYYMMDD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY") AND
         (SELECT TO_DATE(EINDT, 'YYYYMMDD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY") > (SELECT TO_DATE(EKPO_ABDAT, 'YYYYMMDD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY")),0)
         +
         COALESCE((
    SELECT SUM(MENGE) FROM "AUPSUP_DATABASE.data.tables::T_APPROVE_SAG_EKES_EKET" WHERE EBTYP = :I_EBTYP AND EBELN = t1.EBELN AND EBELP = t1.EBELP AND
         (SELECT TO_DATE(EINDT, 'YYYYMMDD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY") <= (SELECT TO_VARCHAR(TO_DATE(t1.EINDT, 'YYYYMMDD'), 'YYYY-MM-DD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY") AND
         (SELECT TO_DATE(EINDT, 'YYYYMMDD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY") > (SELECT TO_DATE(EKPO_ABDAT, 'YYYYMMDD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY")),0)
         +
          COALESCE((
    SELECT SUM(MENGE) FROM :NEW_EKES WHERE EBELN = t1.EBELN AND EBELP = t1.EBELP AND
         (SELECT TO_DATE(EINDT, 'YYYYMMDD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY") <= (SELECT TO_VARCHAR(TO_DATE(t1.EINDT, 'YYYYMMDD'), 'YYYY-MM-DD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY")),0)        
) as PROG_CONFERMA FROM :OUT_TABLE as t1;




/*
OUT_TABLE = SELECT t1.EBELN,t1.EBELP,t1.EINDT,t1.MENGE,t1.QTA_APERTA,t1.PROG_RICHIESTO, COALESCE(t2.MENGE,0) as PROG_CONFERMA, t1.ROWNUMBER FROM :OUT_TABLE as t1
    LEFT OUTER JOIN (
         SELECT EBELN,EBELP,MENGE,EINDT FROM "AUPSUP_DATABASE.data.tables::ET_SAG_EKES" WHERE EBTYP = :I_EBTYP AND
         (SELECT TO_VARCHAR(TO_DATE(EINDT, 'YYYYMMDD'), 'YYYY-MM-DD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY") < (SELECT TO_VARCHAR(TO_DATE(t1.EINDT, 'YYYYMMDD'), 'YYYY-MM-DD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY") AND
         (SELECT TO_VARCHAR(TO_DATE(EINDT, 'YYYYMMDD'), 'YYYY-MM-DD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY") > (SELECT TO_VARCHAR(TO_DATE(EKPO_ABDAT, 'YYYYMMDD'), 'YYYY-MM-DD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY")
    ) as t2 ON t1.EBELN = t2.EBELN and t1.EBELP = t2.EBELP and t1.EINDT = t2.EINDT;
*/

   /*OUT_TABLE = SELECT t1.EBELN,t1.EBELP,t1.EINDT,t1.MENGE,t1.QTA_APERTA,t1.PROG_RICHIESTO, COALESCE(t2.MENGE,0) as PROG_CONFERMA, t1.ROWNUMBER FROM :OUT_TABLE as t1
    LEFT OUTER JOIN (

        SELECT a.EBELN,a.EBELP,a.MENGE,b.ROWNUMBER FROM "AUPSUP_DATABASE.data.tables::ET_SAG_EKES" AS a
        INNER JOIN
        :OUT_TABLE AS b ON a.EBELN = b.EBELN AND a.EBELP = b.EBELP
        WHERE ((SELECT TO_VARCHAR(TO_DATE(b.EINDT, 'YYYYMMDD'), 'YYYY-MM-DD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY") < (SELECT TO_VARCHAR(TO_DATE(a.EINDT, 'YYYYMMDD'), 'YYYY-MM-DD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY")) OR 
        ((SELECT TO_VARCHAR(TO_DATE(b.EINDT, 'YYYYMMDD'), 'YYYY-MM-DD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY") = (SELECT TO_VARCHAR(TO_DATE(a.EINDT, 'YYYYMMDD'), 'YYYY-MM-DD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY")) AND b.ROWNUMBER = 1
        UNION
        SELECT a.EBELN,a.EBELP,a.MENGE,b.ROWNUMBER FROM "AUPSUP_DATABASE.data.tables::T_APPROVE_SAG_EKES_EKET" AS a
        INNER JOIN
        :OUT_TABLE AS b ON a.EBELN = b.EBELN AND a.EBELP = b.EBELP
        WHERE ((SELECT TO_VARCHAR(TO_DATE(b.EINDT, 'YYYYMMDD'), 'YYYY-MM-DD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY") < (SELECT TO_VARCHAR(TO_DATE(a.EINDT, 'YYYYMMDD'), 'YYYY-MM-DD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY")) OR 
        ((SELECT TO_VARCHAR(TO_DATE(b.EINDT, 'YYYYMMDD'), 'YYYY-MM-DD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY") = (SELECT TO_VARCHAR(TO_DATE(a.EINDT, 'YYYYMMDD'), 'YYYY-MM-DD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY")) AND b.ROWNUMBER = 1
        
        UNION
        
        SELECT a.EBELN,a.EBELP,a.MENGE,b.ROWNUMBER FROM "AUPSUP_DATABASE.data.tables::ET_SAG_EKES" AS a
        INNER JOIN
        :OUT_TABLE AS b ON a.EBELN = b.EBELN AND a.EBELP = b.EBELP
        WHERE ((SELECT TO_VARCHAR(TO_DATE(b.EINDT, 'YYYYMMDD'), 'YYYY-MM-DD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY") < (SELECT TO_VARCHAR(TO_DATE(a.EINDT, 'YYYYMMDD'), 'YYYY-MM-DD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY")) OR 
        ((SELECT TO_VARCHAR(TO_DATE(b.EINDT, 'YYYYMMDD'), 'YYYY-MM-DD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY") > (SELECT TO_VARCHAR(TO_DATE(a.EINDT, 'YYYYMMDD'), 'YYYY-MM-DD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY")) AND b.ROWNUMBER > 1
        UNION
        SELECT a.EBELN,a.EBELP,a.MENGE,b.ROWNUMBER FROM "AUPSUP_DATABASE.data.tables::T_APPROVE_SAG_EKES_EKET" AS a
        INNER JOIN
        :OUT_TABLE AS b ON a.EBELN = b.EBELN AND a.EBELP = b.EBELP
        WHERE ((SELECT TO_VARCHAR(TO_DATE(b.EINDT, 'YYYYMMDD'), 'YYYY-MM-DD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY") < (SELECT TO_VARCHAR(TO_DATE(a.EINDT, 'YYYYMMDD'), 'YYYY-MM-DD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY")) OR 
        ((SELECT TO_VARCHAR(TO_DATE(b.EINDT, 'YYYYMMDD'), 'YYYY-MM-DD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY") > (SELECT TO_VARCHAR(TO_DATE(a.EINDT, 'YYYYMMDD'), 'YYYY-MM-DD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY")) AND b.ROWNUMBER > 1        
        
        
        
 ) as t2 ON t1.ROWNUMBER = t2.ROWNUMBER;*/
 
 OUT_TABLE = SELECT * FROM :OUT_TABLE ORDER BY EINDT;

END IF;

END