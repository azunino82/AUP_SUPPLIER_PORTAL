/*Procedura che torna le schedulazioni (EKET EKEH) dato un piano di consegna (EBELN EBELP) passati in input e torna anche i calcoli per le quantità confermate */


PROCEDURE "AUPSUP_DATABASE.data.procedures.SchedulingAgreement::GetSchedulationForSAG" ( 
IN userid NVARCHAR(250),
IN IT_EBELN NVARCHAR(10),
IN IT_EBELP VARCHAR(5),
IN I_BSTYP NVARCHAR(1),
IN I_BSART VARCHAR(4),
IN I_EBTYP VARCHAR(4),
IN NEW_EKES TABLE (EBELN NVARCHAR(10), EBELP VARCHAR(5),EINDT VARCHAR(8),MENGE DECIMAL(14,3)),
OUT OUT_TABLE TABLE (EBELN NVARCHAR(10), EBELP VARCHAR(5),EINDT VARCHAR(8),MENGE DECIMAL(14,3),ETENR VARCHAR(4),QTA_CONFERMATA DECIMAL(14,3), ZPERIODO NVARCHAR(1))
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER AS
BEGIN

DECLARE GG_ESTRAZIONE INTEGER DEFAULT 0;
DECLARE TODAY_DATE DATE;
DECLARE END_DATE DATE;
DECLARE COUNTER INTEGER;
DECLARE EKPO_ABDAT VARCHAR(8);

SELECT ABDAT INTO EKPO_ABDAT FROM "AUPSUP_DATABASE.data.tables::ET_SAG_EKPO" WHERE EBELN = :IT_EBELN and EBELP = :IT_EBELP;
IF EKPO_ABDAT = '00000000' THEN -- se ABDAT è 00000000 prendo tutte le schedulazioni
    EKPO_ABDAT = '19000101';
END IF;

-- prendo i giorni di estrazione dalla tabella di customizing
SELECT GG_ESTRAZIONE INTO GG_ESTRAZIONE FROM "AUPSUP_DATABASE.data.tables::T_ORDERS_TYPES" WHERE BSTYP = :I_BSTYP AND BSART = :I_BSART;

SELECT CURRENT_DATE INTO TODAY_DATE FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";
-- sommo alla data di oggi i giorni inseriti nella tabella di customizing 
SELECT ADD_DAYS (TO_DATE (TODAY_DATE, 'YYYY-MM-DD'), :GG_ESTRAZIONE) INTO END_DATE FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";

-- estraggo tutte le eket - ekeh che hanno data EINDT < data di oggi + giorni estrazione
IF I_EBTYP = '' THEN
    OUT_TABLE = 
    SELECT EBELN,EBELP,EINDT,MENGE,ETENR,0 AS QTA_CONFERMATA, ZPERIODO FROM "AUPSUP_DATABASE.data.tables::ET_SAG_EKEH" WHERE (SELECT TO_VARCHAR(TO_DATE(EINDT, 'YYYYMMDD'), 'YYYY-MM-DD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY")  <= END_DATE AND EBELN = :IT_EBELN AND EBELP = :IT_EBELP
    UNION
    SELECT EBELN,EBELP,EINDT,MENGE,ETENR,0 AS QTA_CONFERMATA, ZPERIODO FROM "AUPSUP_DATABASE.data.tables::ET_SAG_EKET" WHERE (SELECT TO_VARCHAR(TO_DATE(EINDT, 'YYYYMMDD'), 'YYYY-MM-DD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY")  <= END_DATE AND EBELN = :IT_EBELN AND EBELP = :IT_EBELP
    ORDER BY EINDT ASC;
ELSE
    OUT_TABLE = 
    SELECT a.EBELN,a.EBELP,a.EINDT,a.MENGE,a.ETENR,(
        COALESCE ((SELECT SUM(MENGE) FROM "AUPSUP_DATABASE.data.tables::ET_SAG_EKES" WHERE a.EBELN = EBELN and a.EBELP = EBELP and a.ETENR = XBLNR and EBTYP = :I_EBTYP),0)
        +
        COALESCE ((SELECT SUM(MENGE) FROM "AUPSUP_DATABASE.data.tables::T_APPROVE_SAG_EKES_EKET" WHERE a.EBELN = EBELN and a.EBELP = EBELP and EBTYP = :I_EBTYP and a.ETENR = XBLNR),0)
    
    ) AS QTA_CONFERMATA, a.ZPERIODO FROM "AUPSUP_DATABASE.data.tables::ET_SAG_EKEH" as a WHERE (SELECT TO_VARCHAR(TO_DATE(a.EINDT, 'YYYYMMDD'), 'YYYY-MM-DD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY")  < END_DATE AND a.EBELN = :IT_EBELN AND a.EBELP = :IT_EBELP
    UNION
    SELECT a.EBELN,a.EBELP,a.EINDT,a.MENGE,a.ETENR,(
        COALESCE ((SELECT SUM(MENGE) FROM "AUPSUP_DATABASE.data.tables::ET_SAG_EKES" WHERE a.EBELN = EBELN and a.EBELP = EBELP and a.ETENR = XBLNR and EBTYP = :I_EBTYP),0)
        +
        COALESCE ((SELECT SUM(MENGE) FROM "AUPSUP_DATABASE.data.tables::T_APPROVE_SAG_EKES_EKET" WHERE a.EBELN = EBELN and a.EBELP = EBELP and EBTYP = :I_EBTYP and a.ETENR = XBLNR),0)
    
    ) AS QTA_CONFERMATA, a.ZPERIODO FROM "AUPSUP_DATABASE.data.tables::ET_SAG_EKET" as a WHERE (SELECT TO_VARCHAR(TO_DATE(a.EINDT, 'YYYYMMDD'), 'YYYY-MM-DD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY")  < END_DATE AND a.EBELN = :IT_EBELN AND a.EBELP = :IT_EBELP
    ORDER BY EINDT ASC;
END IF;

OUT_TABLE = SELECT * FROM :OUT_TABLE ORDER BY EINDT;

END