PROCEDURE "AUPSUP_DATABASE.data.procedures.SchedulingAgreement::GetConfirms" ( 
IN userid NVARCHAR(250),
IN IT_EBELN NVARCHAR(10),
IN IT_EBELP VARCHAR(5),
IN IT_LIFNR TABLE (ELIFN NVARCHAR(10)),
IN IT_EKORG TABLE (EKORG NVARCHAR(4)),
IN IT_MATNR TABLE (MATNR NVARCHAR(40)),
IN IT_EKGRP TABLE (EKGRP NVARCHAR(3)),
IN IT_WERKS TABLE (WERKS NVARCHAR(4)),
OUT ET_RETURN_EKKO_EKPO "AUPSUP_DATABASE.data.structures.SchedulingAgreement::APPROVE_EKKO_EKPO_Structure",
OUT ET_RETURN_EKES_EKET "AUPSUP_DATABASE.data.structures.SchedulingAgreement::APPROVE_EKES_EKET_Structure",
OUT ET_RETURN_EKEH_EKEK "AUPSUP_DATABASE.data.structures.SchedulingAgreement::APPROVE_EKEH_EKEK_Structure" 
)   
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER 
	--DEFAULT SCHEMA <default_schema_name>
	READS SQL DATA AS
BEGIN

DECLARE COUNTER INTEGER; 
DECLARE counterLifnr INTEGER;
 
/*Controllo se le organizzazioni commerciali sono state passate dal servizio*/
SELECT COUNT(*) into COUNTER FROM :IT_EKORG WHERE EKORG <> '';
IF COUNTER = 0 THEN 
	/* prendo le organizzazioni commerciali dell'utente connesso*/
	CALL "AUPSUP_DATABASE.data.procedures.Utils::GetUserPurchaseOrgs"(:userid,:IT_EKORG);
END IF;

IF IT_EBELN = '' THEN
	ET_RETURN_EKKO_EKPO = SELECT * FROM "AUPSUP_DATABASE.data.tables::T_APPROVE_SAG_EKKO_EKPO" WHERE EKORG IN (SELECT EKORG FROM :IT_EKORG) AND STATUS = 'RC';
ELSE
    BEGIN 
        IF IT_EBELP <> '' THEN
            ET_RETURN_EKKO_EKPO = SELECT * FROM "AUPSUP_DATABASE.data.tables::T_APPROVE_SAG_EKKO_EKPO" WHERE EBELN = :IT_EBELN AND EBELP = :IT_EBELP AND STATUS = 'RC';
        ELSE
            ET_RETURN_EKKO_EKPO = SELECT * FROM "AUPSUP_DATABASE.data.tables::T_APPROVE_SAG_EKKO_EKPO" WHERE EKORG IN (SELECT EKORG FROM :IT_EKORG) AND EBELN = :IT_EBELN AND STATUS = 'RC';
        END IF;
    END;
END IF;


SELECT COUNT(*) into COUNTER FROM :IT_LIFNR;
IF COUNTER > 0 THEN
	ET_RETURN_EKKO_EKPO = SELECT * FROM :ET_RETURN_EKKO_EKPO WHERE LIFNR IN (SELECT ELIFN FROM :IT_LIFNR);
END IF;

SELECT COUNT(*) into COUNTER FROM :IT_MATNR;
IF COUNTER > 0 THEN
	ET_RETURN_EKKO_EKPO = SELECT * FROM :ET_RETURN_EKKO_EKPO WHERE MATNR IN (SELECT MATNR FROM :IT_MATNR);
END IF;

SELECT COUNT(*) into COUNTER FROM :IT_EKGRP;
IF COUNTER > 0 THEN
	ET_RETURN_EKKO_EKPO = SELECT * FROM :ET_RETURN_EKKO_EKPO WHERE EKGRP IN (SELECT EKGRP FROM :IT_EKGRP);
END IF;

SELECT COUNT(*) into COUNTER FROM :IT_WERKS;
IF COUNTER > 0 THEN
	ET_RETURN_EKKO_EKPO = SELECT * FROM :ET_RETURN_EKKO_EKPO WHERE WERKS IN (SELECT WERKS FROM :IT_WERKS);
END IF;

ET_RETURN_EKES_EKET = SELECT * FROM "AUPSUP_DATABASE.data.tables::T_APPROVE_SAG_EKES_EKET" AS table1 WHERE EXISTS (SELECT * FROM :ET_RETURN_EKKO_EKPO as table2
              WHERE table1.EBELN = table2.EBELN AND table1.EBELP = table2.EBELP);
              
ET_RETURN_EKEH_EKEK = SELECT * FROM "AUPSUP_DATABASE.data.tables::T_APPROVE_SAG_EKEH_EKEK" AS table1 WHERE EXISTS (SELECT * FROM :ET_RETURN_EKKO_EKPO as table2
              WHERE table1.EBELN = table2.EBELN AND table1.EBELP = table2.EBELP);
END;
    