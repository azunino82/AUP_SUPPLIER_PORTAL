PROCEDURE "AUPSUP_DATABASE.data.procedures.SchedulingAgreement::MM00_SAG_DOC_LIST"(
    IN userid VARCHAR(250),
    IN IT_LIFNR TABLE (ELIFN NVARCHAR(10)), 
    IN IT_EBELN TABLE (EBELN NVARCHAR(10)),
    IN IT_EBELP TABLE (EBELP VARCHAR(5)),      
    IN IT_EKORG TABLE (EKORG NVARCHAR(4)),
    IN IT_MATNR TABLE (MATNR NVARCHAR(40)), 
    IN IT_EKGRP TABLE (EKGRP NVARCHAR(3)),
    IN IT_WERKS TABLE (EWERK NVARCHAR(4),DESCR NVARCHAR(255)),
    IN IT_BSTYP TABLE (BSTYP NVARCHAR(1)),
    IN I_SPRAS NVARCHAR(1),
    IN I_EBTYP NVARCHAR(2), /*Categoria consegna selezionato dalla schermata Ordine / Posizione */
    IN I_TIPO_ORDINE NVARCHAR(3), /*Ordine Chiusto = OC, Ordine Aperto = OA, Conferma = C*/   
    IN I_EINDT_FROM VARCHAR(8),
    IN I_EINDT_TO VARCHAR(8), 
    OUT ET_SAG_EKEH "AUPSUP_DATABASE.data.structures.SchedulingAgreement::ET_SAG_EKEHStructure",
    OUT ET_SAG_EKEK "AUPSUP_DATABASE.data.structures.SchedulingAgreement::ET_SAG_EKEKStructure",
    OUT ET_SAG_EKES "AUPSUP_DATABASE.data.structures.SchedulingAgreement::ET_SAG_EKESStructure",
    OUT ET_SAG_EKET "AUPSUP_DATABASE.data.structures.SchedulingAgreement::ET_SAG_EKETStructure",
    OUT ET_SAG_EKKO "AUPSUP_DATABASE.data.structures.SchedulingAgreement::ET_SAG_EKKOStructure",
    OUT ET_SAG_EKPO "AUPSUP_DATABASE.data.structures.SchedulingAgreement::ET_SAG_EKPOStructure",
   OUT OUT_POS_PIANI_CONS "AUPSUP_DATABASE.data.structures.SchedulingAgreement::OUT_PIANI_CONSEGNAStructure"
   --OUT OUT_POS_PIANI_CONS TABLE (EBELN NVARCHAR(10),EBELP VARCHAR(5),SUM_EKEH INTEGER)
)
LANGUAGE SQLSCRIPT
SQL SECURITY INVOKER
AS
BEGIN

DECLARE IT_BSART TABLE (ESART NVARCHAR(4));
--DECLARE IT_BSTYP TABLE (BSTYP NVARCHAR(1));
DECLARE IT_CUST_FIELDS TABLE (CUST_FIELD NVARCHAR(30),SOURCE_TABLE NVARCHAR(30),SOURCE_FIELD NVARCHAR(30));

DECLARE I_EGLKZ_P_EXCL NVARCHAR(1);
DECLARE I_ELIKZ_P_EXCL NVARCHAR(1) DEFAULT 'X';
DECLARE I_LOEKZ_K_EXCL NVARCHAR(1);
DECLARE I_LOEKZ_P_EXCL NVARCHAR(1) DEFAULT 'X';
DECLARE I_MEMORY_EXCL NVARCHAR(1);  
DECLARE I_RETPO_P_EXCL NVARCHAR(1);
DECLARE I_WITH_EKES NVARCHAR(1);
DECLARE I_WITH_EKET NVARCHAR(1); 

DECLARE EKORG_ROW INTEGER;
DECLARE TODAY DATETIME;
DECLARE TODAY_TIMESTAMP TIMESTAMP;
DECLARE FORMAT_TODAY VARCHAR(8);
DECLARE counter INTEGER;
DECLARE COUNT_DELETE_EKPO INTEGER;
DECLARE T_EKPO_DELETED TABLE (EBELN NVARCHAR(10),EBELP VARCHAR(5),COUNT INTEGER);
DECLARE T_EKET_DELETED TABLE (EBELN NVARCHAR(10),COUNT INTEGER);
DECLARE out_anagrafica TABLE(METAID VARCHAR(50), DESCR NVARCHAR(255));
DECLARE out_lifnr TABLE(METAID VARCHAR(50), LIFNR NVARCHAR(10), DESCR NVARCHAR(35));

DECLARE T_ORIG_EKPO_ROW_NUMBER TABLE (EBELN NVARCHAR(10),COUNTER INTEGER);
DECLARE T_AFTER_EKPO_ROW_NUMBER TABLE (EBELN NVARCHAR(10),COUNTER INTEGER);

DECLARE T_PROGR_CONF_1_OLD TABLE (EBELN NVARCHAR(10),EBELP VARCHAR(5),COUNT DECIMAL(14, 3));
DECLARE T_PROGR_CONF_1_BACKEND TABLE (EBELN NVARCHAR(10),EBELP VARCHAR(5),COUNT DECIMAL(14, 3));
DECLARE T_PROGR_CONF_2_OLD TABLE (EBELN NVARCHAR(10),EBELP VARCHAR(5),COUNT DECIMAL(14, 3));
DECLARE T_PROGR_CONF_2_BACKEND TABLE (EBELN NVARCHAR(10),EBELP VARCHAR(5),COUNT DECIMAL(14, 3));
DECLARE T_SEC_PER_PROG_RIC_1 TABLE (EBELN NVARCHAR(10),EBELP VARCHAR(5),COUNT DECIMAL(14, 3)); -- calcolo secondo periodo progressivo richiesto
DECLARE T_SEC_PER_PROG_CONF_1 TABLE (EBELN NVARCHAR(10),EBELP VARCHAR(5),COUNT DECIMAL(14, 3)); -- calcolo secondo periodo progressivo confermato
DECLARE T_SEC_PER_PROG_RIC_2 TABLE (EBELN NVARCHAR(10),EBELP VARCHAR(5),COUNT DECIMAL(14, 3)); -- calcolo secondo periodo progressivo richiesto
DECLARE T_SEC_PER_PROG_CONF_2 TABLE (EBELN NVARCHAR(10),EBELP VARCHAR(5),COUNT DECIMAL(14, 3)); -- calcolo secondo periodo progressivo confermato

DECLARE CURRENT_SYSID NVARCHAR(30);

-- parametri per calcolo percentuale
DECLARE GG_SCOSTAMENTO INTEGER;
DECLARE EKKO_DATE VARCHAR(8);

/*data odierna*/
SELECT CURRENT_DATE "current date" INTO TODAY FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";

/*PRENDO IL SYD DA PASSARE AL SERVIZIO*/
SELECT SYSID INTO CURRENT_SYSID FROM "AUPSUP_DATABASE.data.tables::T_BCKND_SYSTEMS";

create local temporary table #IT_BSART (ESART NVARCHAR(4));
--create local temporary table #IT_BSTYP (BSTYP NVARCHAR(1));
create local temporary table #IT_CUST_FIELDS (CUST_FIELD NVARCHAR(30),SOURCE_TABLE NVARCHAR(30),SOURCE_FIELD NVARCHAR(30));

create local temporary table #OUT_POS_PIANI_CONS LIKE "AUPSUP_DATABASE.data.structures.SchedulingAgreement::OUT_PIANI_CONSEGNAStructure";

IT_BSART = SELECT * FROM #IT_BSART;
--IT_BSTYP = SELECT * FROM #IT_BSTYP;
IT_CUST_FIELDS = SELECT * FROM #IT_CUST_FIELDS;

SELECT COUNT(*) into counter FROM :IT_LIFNR;
IF counter = 0 THEN
CALL "AUPSUP_DATABASE.data.procedures.Utils::GetMetasupplierList"(:userid,:out_anagrafica,:out_lifnr);
IT_LIFNR = SELECT LIFNR AS ELIFN FROM :out_lifnr;
END IF;


/*Controllo se le organizzazioni commerciali sono state passate dal servizio*/
SELECT COUNT(*) into EKORG_ROW FROM :IT_EKORG WHERE EKORG <> '';
IF EKORG_ROW = 0 THEN
      /* prendo le organizzazioni commerciali dell'utente connesso*/
      CALL "AUPSUP_DATABASE.data.procedures.Utils::GetUserPurchaseOrgs"(:userid,:IT_EKORG);
END IF;

/*estrazione dei PLANT (WERKS) dell'utente connesso bisogna capire dove prendere il SYSID*/
SELECT COUNT(*) into counter FROM :IT_WERKS;
IF counter = 0 THEN
      CALL "AUPSUP_DATABASE.data.procedures.Utils::GetUserPlants"(:userid,:IT_WERKS);
END IF;

--IT_BSTYP = SELECT 'L' AS BSTYP FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";
IT_BSART = SELECT BSART AS ESART FROM "AUPSUP_DATABASE.data.tables::T_ORDERS_TYPES" WHERE SYSID = :CURRENT_SYSID and LISTA_ODA = 'X' and BSTYP IN (SELECT BSTYP FROM :IT_BSTYP);

CALL "AUPSUP_DATABASE.data.virtualProcedures::VIRTUAL_MM00_SAG_DOC_LIST"(:IT_BSART,:IT_BSTYP,:IT_CUST_FIELDS,:IT_EBELN,:IT_EBELP,:IT_EKGRP,:IT_EKORG,:IT_LIFNR,:IT_MATNR,:I_SPRAS,:IT_WERKS,'','X','X','X','X','X','X',:I_EGLKZ_P_EXCL,:I_ELIKZ_P_EXCL,:I_LOEKZ_K_EXCL,:I_LOEKZ_P_EXCL,:I_MEMORY_EXCL,'X',:I_RETPO_P_EXCL,:ET_SAG_EKEH,:ET_SAG_EKEK,:ET_SAG_EKES,:ET_SAG_EKET,:ET_SAG_EKKO,:ET_SAG_EKPO);

ET_SAG_EKES = SELECT MANDT,SYSID,EBELN,EBELP,ETENS,EINDT,EBTYP,LPEIN,UZEIT,MENGE,DABMG,ESTKZ,KZDIS,(SELECT "AUPSUP_DATABASE.data.functions::TF_ADD_ZERO_BEFORE"(XBLNR,4) FROM "AUPSUP_DATABASE.data.synonyms::DUMMY") AS XBLNR,MPROF,EMATN,
ZCUSTOM01,ZCUSTOM02,ZCUSTOM03,ZCUSTOM04,ZCUSTOM05,ZCUSTOM06,ZCUSTOM07,ZCUSTOM08,ZCUSTOM09,ZCUSTOM10 FROM :ET_SAG_EKES;

DELETE FROM "AUPSUP_DATABASE.data.tables::ET_SAG_EKES" WHERE (EBELN) IN (SELECT EBELN FROM :ET_SAG_EKKO);
DELETE FROM "AUPSUP_DATABASE.data.tables::ET_SAG_EKET" WHERE (EBELN) IN (SELECT EBELN FROM :ET_SAG_EKKO);
DELETE FROM "AUPSUP_DATABASE.data.tables::ET_SAG_EKEH" WHERE (EBELN) IN (SELECT EBELN FROM :ET_SAG_EKKO);
DELETE FROM "AUPSUP_DATABASE.data.tables::ET_SAG_EKEK" WHERE (EBELN) IN (SELECT EBELN FROM :ET_SAG_EKKO);
DELETE FROM "AUPSUP_DATABASE.data.tables::ET_SAG_EKKO" WHERE (EBELN) IN (SELECT EBELN FROM :ET_SAG_EKKO);
DELETE FROM "AUPSUP_DATABASE.data.tables::ET_SAG_EKPO" WHERE (EBELN) IN (SELECT EBELN FROM :ET_SAG_EKKO);

INSERT INTO "AUPSUP_DATABASE.data.tables::ET_SAG_EKES"  SELECT * 
            FROM  :ET_SAG_EKES;

INSERT INTO "AUPSUP_DATABASE.data.tables::ET_SAG_EKET"  SELECT * 
            FROM  :ET_SAG_EKET;

INSERT INTO "AUPSUP_DATABASE.data.tables::ET_SAG_EKKO"  SELECT * 
            FROM  :ET_SAG_EKKO; 

INSERT INTO "AUPSUP_DATABASE.data.tables::ET_SAG_EKPO"  SELECT *  
            FROM  :ET_SAG_EKPO;
            
INSERT INTO "AUPSUP_DATABASE.data.tables::ET_SAG_EKEH"  SELECT * 
            FROM :ET_SAG_EKEH;

INSERT INTO "AUPSUP_DATABASE.data.tables::ET_SAG_EKEK"  SELECT *  
            FROM :ET_SAG_EKEK;   

/*calcolare progressivo richiesto delle schedulazioni (EKET o EKEH con ZPERIODO = 1): 
		Sommare EKPO-ZENTRATA e EKET-MENGE o EKEH-MENGE con ZPERIODO1 = 1

T_SEC_PER_PROG_RIC_1 = 
SELECT a.EBELN, a.EBELP, (a.ZENTRATA + COALESCE((SELECT SUM(MENGE) FROM :ET_SAG_EKEH WHERE ZPERIODO = '1' AND EBELN = a.EBELN and EBELP = a.EBELP),0)) as COUNT 
FROM :ET_SAG_EKPO as a
    
UNION

SELECT a.EBELN, a.EBELP, (a.ZENTRATA + COALESCE((SELECT SUM(MENGE) FROM :ET_SAG_EKET WHERE ZPERIODO = '1' AND EBELN = a.EBELN and EBELP = a.EBELP),0)) as COUNT 
FROM :ET_SAG_EKPO as a;
 
T_SEC_PER_PROG_RIC_1 = SELECT EBELN,EBELP, SUM(a.COUNT) AS COUNT  FROM :T_SEC_PER_PROG_RIC_1 as a GROUP BY EBELN, EBELP;
*/
/*calcolare progressivo confermato
Sommare tutte le conferme che arrivano da back end e quelle in corso di approvazione che hanno EKES-EINDT minore di ZFISSAZIONE1
*/


/* SE NON é ATTIVO IL PROGRESSIVO DA CUSTOMIZING NON DEVO USARE LO ZENTRATA
T_SEC_PER_PROG_RIC_1 = 
SELECT a.EBELN, a.EBELP, 
(a.ZENTRATA + COALESCE((SELECT SUM(MENGE) FROM :ET_SAG_EKEH WHERE ZPERIODO = '1' AND EBELN = a.EBELN and EBELP = a.EBELP),0) 
+ COALESCE((SELECT SUM(MENGE) FROM :ET_SAG_EKET WHERE ZPERIODO = '1' AND EBELN = a.EBELN and EBELP = a.EBELP),0)) as COUNT 
FROM :ET_SAG_EKPO as a;
*/

T_SEC_PER_PROG_RIC_1 = 
SELECT a.EBELN, a.EBELP, 
(COALESCE((SELECT SUM(MENGE) FROM :ET_SAG_EKEH WHERE ZPERIODO = '1' AND EBELN = a.EBELN and EBELP = a.EBELP),0) 
+ COALESCE((SELECT SUM(MENGE) FROM :ET_SAG_EKET WHERE ZPERIODO = '1' AND EBELN = a.EBELN and EBELP = a.EBELP),0)) as COUNT 
FROM :ET_SAG_EKPO as a;

/* Vecchie logiche calcolo Conf per date di validità
T_PROGR_CONF_1_OLD = SELECT a.EBELN, a.EBELP, b.SUM_OLD_SCHED as COUNT FROM :ET_SAG_EKPO as a INNER JOIN (
SELECT EBELN, EBELP,EINDT, SUM(MENGE) AS SUM_OLD_SCHED FROM "AUPSUP_DATABASE.data.tables::T_APPROVE_SAG_EKES_EKET" GROUP BY EBELN, EBELP, EINDT ) as b ON a.EBELN = b.EBELN and a.EBELP = b.EBELP 
WHERE (SELECT TO_VARCHAR(TO_DATE(b.EINDT, 'YYYYMMDD'), 'YYYY-MM-DD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY") < (SELECT TO_VARCHAR(TO_DATE(a.ZFISSAZIONE1, 'YYYYMMDD'), 'YYYY-MM-DD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY");

T_PROGR_CONF_1_BACKEND = SELECT a.EBELN, a.EBELP, SUM(b.SUM_OLD_SCHED) as COUNT FROM :ET_SAG_EKPO as a INNER JOIN (
SELECT EBELN, EBELP,EINDT, SUM(MENGE) AS SUM_OLD_SCHED FROM :ET_SAG_EKES GROUP BY EBELN, EBELP, EINDT ) as b ON a.EBELN = b.EBELN and a.EBELP = b.EBELP 
WHERE (SELECT TO_VARCHAR(TO_DATE(b.EINDT, 'YYYYMMDD'), 'YYYY-MM-DD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY") < (SELECT TO_VARCHAR(TO_DATE(a.ZFISSAZIONE1, 'YYYYMMDD'), 'YYYY-MM-DD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY") GROUP BY a.EBELN, a.EBELP;
*/

/* Logiche valide solo per progressivo NON attivo*/
T_PROGR_CONF_1_OLD = SELECT a.EBELN, a.EBELP, b.SUM_OLD_SCHED as COUNT FROM :ET_SAG_EKPO as a INNER JOIN (
SELECT EBELN, EBELP, SUM(MENGE) AS SUM_OLD_SCHED FROM "AUPSUP_DATABASE.data.tables::T_APPROVE_SAG_EKES_EKET" as a1
WHERE XBLNR IN (SELECT ETENR FROM :ET_SAG_EKET WHERE ZPERIODO = '1' AND EBELN = a1.EBELN and EBELP = a1.EBELP)
   or XBLNR IN (SELECT ETENR FROM :ET_SAG_EKEH WHERE ZPERIODO = '1' AND EBELN = a1.EBELN and EBELP = a1.EBELP)
   and (a1.STATUS = null OR a1.STATUS = '' OR a1.STATUS = 'RC')
   GROUP BY EBELN, EBELP ) as b ON a.EBELN = b.EBELN and a.EBELP = b.EBELP;


T_PROGR_CONF_1_BACKEND = SELECT a.EBELN, a.EBELP, SUM(b.SUM_OLD_SCHED) as COUNT FROM :ET_SAG_EKPO as a INNER JOIN (
SELECT EBELN, EBELP, SUM(MENGE) AS SUM_OLD_SCHED FROM :ET_SAG_EKES as a1
WHERE XBLNR IN (SELECT ETENR FROM :ET_SAG_EKET WHERE ZPERIODO = '1' AND EBELN = a1.EBELN and EBELP = a1.EBELP)
   or XBLNR IN (SELECT ETENR FROM :ET_SAG_EKEH WHERE ZPERIODO = '1' AND EBELN = a1.EBELN and EBELP = a1.EBELP)
   GROUP BY EBELN, EBELP ) as b ON a.EBELN = b.EBELN and a.EBELP = b.EBELP
   GROUP BY a.EBELN, a.EBELP;


/*calcolare progressivo richiesto delle schedulazioni (EKET o EKEH con ZPERIODO = 1 e 2 e blank)
		Sommare EKPO-ZENTRATA e EKET-MENGE o EKEH-MENGE con ZPERIODO1 = 1 e ZPERIODO1 = 2 e ZPERIODO1 = blank
*/
T_SEC_PER_PROG_RIC_2 = 

/* SE NON é ATTIVO IL PROGRESSIVO DA CUSTOMIZING NON DEVO USARE LO ZENTRATA
SELECT a.EBELN, a.EBELP, 
(a.ZENTRATA + COALESCE((SELECT SUM(MENGE) FROM :ET_SAG_EKEH WHERE (ZPERIODO = '1' OR ZPERIODO = '2' OR ZPERIODO = '') AND EBELN = a.EBELN and EBELP = a.EBELP),0) 
+ COALESCE((SELECT SUM(MENGE) FROM :ET_SAG_EKET WHERE (ZPERIODO = '1' OR ZPERIODO = '2' OR ZPERIODO = '') AND EBELN = a.EBELN and EBELP = a.EBELP),0)) as COUNT 
FROM :ET_SAG_EKPO as a; */

SELECT a.EBELN, a.EBELP, 
(COALESCE((SELECT SUM(MENGE) FROM :ET_SAG_EKEH WHERE (ZPERIODO = '1' OR ZPERIODO = '2' OR ZPERIODO = '') AND EBELN = a.EBELN and EBELP = a.EBELP),0) 
+ COALESCE((SELECT SUM(MENGE) FROM :ET_SAG_EKET WHERE (ZPERIODO = '1' OR ZPERIODO = '2' OR ZPERIODO = '') AND EBELN = a.EBELN and EBELP = a.EBELP),0)) as COUNT 
FROM :ET_SAG_EKPO as a;

/*
SELECT a.EBELN, a.EBELP, 
--(a.ZENTRATA + b.SUM_EKEH) 
(a.ZENTRATA + COALESCE((SELECT SUM(MENGE) FROM :ET_SAG_EKEH WHERE (ZPERIODO = '1' OR ZPERIODO = '2' OR ZPERIODO = '') AND EBELN = a.EBELN and EBELP = a.EBELP),0) 
+ COALESCE((SELECT SUM(MENGE) FROM :ET_SAG_EKET WHERE (ZPERIODO = '1' OR ZPERIODO = '2' OR ZPERIODO = '') AND EBELN = a.EBELN and EBELP = a.EBELP),0))) as COUNT 
FROM :ET_SAG_EKPO as a 
--INNER JOIN (
--SELECT EBELN, EBELP, SUM(MENGE) AS SUM_EKEH FROM :ET_SAG_EKEH WHERE ZPERIODO = '1' OR ZPERIODO = '2' OR ZPERIODO = '' GROUP BY EBELN, EBELP) as b ON a.EBELN = b.EBELN and a.EBELP = b.EBELP
    
UNION

SELECT a.EBELN, a.EBELP, 
(a.ZENTRATA + COALESCE((SELECT SUM(MENGE) FROM :ET_SAG_EKET WHERE (ZPERIODO = '1' OR ZPERIODO = '2' OR ZPERIODO = '') AND EBELN = a.EBELN and EBELP = a.EBELP),0)) as COUNT FROM :ET_SAG_EKPO as a;
--(a.ZENTRATA + b.SUM_EKET) as COUNT FROM :ET_SAG_EKPO as a INNER JOIN (
--SELECT EBELN, EBELP, SUM(MENGE) AS SUM_EKET FROM :ET_SAG_EKET WHERE  ZPERIODO = '1' OR ZPERIODO = '2' OR ZPERIODO = '' GROUP BY EBELN, EBELP) as b ON a.EBELN = b.EBELN and a.EBELP = b.EBELP;
 
T_SEC_PER_PROG_RIC_2 = SELECT EBELN,EBELP, SUM(a.COUNT) AS COUNT  FROM :T_SEC_PER_PROG_RIC_2 as a GROUP BY EBELN, EBELP;
*/
/*calcolare progressivo confermato
Sommare tutte le conferme che arrivano da back end e quelle in corso di approvazione che hanno EKES-EINDT minore di ZFISSAZIONE2 (saranno incluse anche quelle con data minore di ZFISSAZIONE1)
*/

/*Aggiunta la condizione sul campo XBLNR per elaborazione PROGRESSIVI NON ATTIVI*/
T_PROGR_CONF_2_OLD = SELECT a.EBELN, a.EBELP, COALESCE((SELECT SUM(MENGE) FROM "AUPSUP_DATABASE.data.tables::T_APPROVE_SAG_EKES_EKET" WHERE EBELN = a.EBELN and EBELP = a.EBELP 
and (XBLNR in (SELECT ETENR FROM :ET_SAG_EKET as a1 WHERE (ZPERIODO = '1' OR ZPERIODO = '2' OR ZPERIODO = '') AND EBELN = a1.EBELN and EBELP = a1.EBELP)
   OR XBLNR in (SELECT ETENR FROM :ET_SAG_EKEH as a1 WHERE (ZPERIODO = '1' OR ZPERIODO = '2' OR ZPERIODO = '') AND EBELN = a1.EBELN and EBELP = a1.EBELP))),0) 
as COUNT FROM :ET_SAG_EKPO as a;

/*
T_PROGR_CONF_2_OLD = SELECT a.EBELN, a.EBELP, b.SUM_OLD_SCHED as COUNT FROM :ET_SAG_EKPO as a INNER JOIN (
SELECT EBELN, EBELP,EINDT, SUM(MENGE) AS SUM_OLD_SCHED FROM "AUPSUP_DATABASE.data.tables::T_APPROVE_SAG_EKES_EKET" GROUP BY EBELN, EBELP, EINDT ) as b ON a.EBELN = b.EBELN and a.EBELP = b.EBELP;
*/
T_PROGR_CONF_2_BACKEND = SELECT a.EBELN, a.EBELP, COALESCE((SELECT SUM(MENGE) FROM :ET_SAG_EKES WHERE EBELN = a.EBELN and EBELP = a.EBELP
and (XBLNR in (SELECT ETENR FROM :ET_SAG_EKET as a1 WHERE (ZPERIODO = '1' OR ZPERIODO = '2' OR ZPERIODO = '') AND EBELN = a1.EBELN and EBELP = a1.EBELP)
 OR XBLNR in (SELECT ETENR FROM :ET_SAG_EKEH as a1 WHERE (ZPERIODO = '1' OR ZPERIODO = '2' OR ZPERIODO = '') AND EBELN = a1.EBELN and EBELP = a1.EBELP))),0)
as COUNT FROM :ET_SAG_EKPO as a ;

/*
T_PROGR_CONF_2_BACKEND = SELECT a.EBELN, a.EBELP, SUM(b.SUM_OLD_SCHED) as COUNT FROM :ET_SAG_EKPO as a INNER JOIN (
SELECT EBELN, EBELP, EINDT, SUM(MENGE) AS SUM_OLD_SCHED FROM :ET_SAG_EKES GROUP BY EBELN, EBELP, EINDT ) as b ON a.EBELN = b.EBELN and a.EBELP = b.EBELP GROUP BY a.EBELN, a.EBELP;
*/

IF I_EINDT_FROM = '' AND I_EINDT_TO = '' THEN
   I_EINDT_FROM := '19000101';
   I_EINDT_TO := '20500101';
END IF;

IF I_TIPO_ORDINE = 'ODA' THEN
   -- COALESCE mette 0 se trova null
   INSERT INTO #OUT_POS_PIANI_CONS ( SELECT t1.*,(SELECT SUM(COUNT) FROM :T_SEC_PER_PROG_RIC_1 WHERE EBELN = t1.EBELN and EBELP = t1.EBELP) as P1_PROGR_RIC, 
   (COALESCE((SELECT SUM(COUNT) FROM :T_PROGR_CONF_1_BACKEND WHERE EBELN = t1.EBELN and EBELP = t1.EBELP),0) + 
   COALESCE((SELECT SUM(COUNT) FROM :T_PROGR_CONF_1_OLD WHERE EBELN = t1.EBELN and EBELP = t1.EBELP),0)) as P1_PROGR_CONF, 
   COALESCE((SELECT SUM(COUNT) FROM :T_SEC_PER_PROG_RIC_2 WHERE EBELN = t1.EBELN and EBELP = t1.EBELP),0) as P2_PROGR_RIC, 
   (COALESCE((SELECT SUM(COUNT) FROM :T_PROGR_CONF_2_BACKEND WHERE EBELN = t1.EBELN and EBELP = t1.EBELP),0) + 
   COALESCE((SELECT SUM(COUNT) FROM :T_PROGR_CONF_2_OLD WHERE EBELN = t1.EBELN and EBELP = t1.EBELP),0)) as P2_PROGR_CONF, 
   (SELECT PLANT_DESCR FROM "AUPSUP_DATABASE.data.tables::T_BU_PLANT" WHERE PLANT = t1.WERKS) AS PLANT_DESCR, 
   CASE WHEN (SELECT COUNT(*) FROM "AUPSUP_DATABASE.data.tables::T_PROFILI_CONFERMA_HEADER" WHERE PROFILO_CONTROLLO = t1.BSTAE) = 0 THEN 'X' END  AS SKIP_NO_CONFERME, 
   (CASE WHEN (SELECT DAYS_BETWEEN (TO_DATE(t1.CREATIONDATE, 'YYYYMMDD') , TO_DATE((SELECT CURRENT_DATE "current date" FROM "AUPSUP_DATABASE.data.synonyms::DUMMY"), 'YYYY-MM-DD')) "days between" FROM "AUPSUP_DATABASE.data.synonyms::DUMMY") > 10 THEN 10 
   ELSE (SELECT DAYS_BETWEEN (TO_DATE(t1.CREATIONDATE, 'YYYYMMDD') , TO_DATE((SELECT CURRENT_DATE "current date" FROM "AUPSUP_DATABASE.data.synonyms::DUMMY"), 'YYYY-MM-DD')) "days between" FROM "AUPSUP_DATABASE.data.synonyms::DUMMY") END) AS GG_SCOSTAMENTO,
   (CASE WHEN (SELECT SUM(COUNT) FROM :T_SEC_PER_PROG_RIC_1 WHERE EBELN = t1.EBELN and EBELP = t1.EBELP) > 0 THEN (((COALESCE((SELECT SUM(COUNT) FROM :T_PROGR_CONF_1_BACKEND WHERE EBELN = t1.EBELN and EBELP = t1.EBELP),0) + 
   COALESCE((SELECT SUM(COUNT) FROM :T_PROGR_CONF_1_OLD WHERE EBELN = t1.EBELN and EBELP = t1.EBELP),0)) / (SELECT SUM(COUNT) FROM :T_SEC_PER_PROG_RIC_1 WHERE EBELN = t1.EBELN and EBELP = t1.EBELP)) * 100) ELSE 0 END) as PERC_SCOST,
   '' as STATUS, (SELECT min( EINDT ) FROM "AUPSUP_DATABASE.data.tables::ET_SAG_EKET" WHERE EBELN = t1.EBELN AND EBELP = t1.EBELP AND 
   (SELECT TO_DATE(EINDT, 'YYYYMMDD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY") between (SELECT TO_DATE(:I_EINDT_FROM, 'YYYYMMDD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY") AND 
      (SELECT TO_DATE(:I_EINDT_TO, 'YYYYMMDD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY")) as EKET_EKEH_EINDT
   FROM :ET_SAG_EKPO as t1 );

END IF;

IF I_TIPO_ORDINE = 'SAG' THEN

-- COALESCE mette 0 se trova null
   INSERT INTO #OUT_POS_PIANI_CONS ( SELECT t1.*,(SELECT SUM(COUNT) FROM :T_SEC_PER_PROG_RIC_1 WHERE EBELN = t1.EBELN and EBELP = t1.EBELP) as P1_PROGR_RIC, 
   (COALESCE((SELECT SUM(COUNT) FROM :T_PROGR_CONF_1_BACKEND WHERE EBELN = t1.EBELN and EBELP = t1.EBELP),0) + 
   COALESCE((SELECT SUM(COUNT) FROM :T_PROGR_CONF_1_OLD WHERE EBELN = t1.EBELN and EBELP = t1.EBELP),0)) as P1_PROGR_CONF, 
   COALESCE((SELECT SUM(COUNT) FROM :T_SEC_PER_PROG_RIC_2 WHERE EBELN = t1.EBELN and EBELP = t1.EBELP),0) as P2_PROGR_RIC, 
   (COALESCE((SELECT SUM(COUNT) FROM :T_PROGR_CONF_2_BACKEND WHERE EBELN = t1.EBELN and EBELP = t1.EBELP),0) + 
   COALESCE((SELECT SUM(COUNT) FROM :T_PROGR_CONF_2_OLD WHERE EBELN = t1.EBELN and EBELP = t1.EBELP),0)) as P2_PROGR_CONF, 
   (SELECT PLANT_DESCR FROM "AUPSUP_DATABASE.data.tables::T_BU_PLANT" WHERE PLANT = t1.WERKS) AS PLANT_DESCR, 
   CASE WHEN (SELECT COUNT(*) FROM "AUPSUP_DATABASE.data.tables::T_PROFILI_CONFERMA_HEADER" WHERE PROFILO_CONTROLLO = t1.BSTAE) = 0 THEN 'X' END  AS SKIP_NO_CONFERME, 
   (CASE WHEN (SELECT DAYS_BETWEEN (TO_DATE((SELECT max( BEDAT )
FROM "AUPSUP_DATABASE.data.tables::ET_SAG_EKET" WHERE EBELN = t1.EBELN AND EBELP = t1.EBELP) , 'YYYYMMDD') , TO_DATE((SELECT CURRENT_DATE "current date" FROM "AUPSUP_DATABASE.data.synonyms::DUMMY"), 'YYYY-MM-DD')) "days between" FROM "AUPSUP_DATABASE.data.synonyms::DUMMY") > 10 THEN 10 
   ELSE (SELECT DAYS_BETWEEN (TO_DATE((SELECT max( BEDAT )
FROM "AUPSUP_DATABASE.data.tables::ET_SAG_EKET" WHERE EBELN = t1.EBELN AND EBELP = t1.EBELP), 'YYYYMMDD') , TO_DATE((SELECT CURRENT_DATE "current date" FROM "AUPSUP_DATABASE.data.synonyms::DUMMY"), 'YYYY-MM-DD')) "days between" FROM "AUPSUP_DATABASE.data.synonyms::DUMMY") END) AS GG_SCOSTAMENTO,
   (CASE WHEN (SELECT SUM(COUNT) FROM :T_SEC_PER_PROG_RIC_1 WHERE EBELN = t1.EBELN and EBELP = t1.EBELP) > 0 THEN (((COALESCE((SELECT SUM(COUNT) FROM :T_PROGR_CONF_1_BACKEND WHERE EBELN = t1.EBELN and EBELP = t1.EBELP),0) + 
   COALESCE((SELECT SUM(COUNT) FROM :T_PROGR_CONF_1_OLD WHERE EBELN = t1.EBELN and EBELP = t1.EBELP),0)) / (SELECT SUM(COUNT) FROM :T_SEC_PER_PROG_RIC_1 WHERE EBELN = t1.EBELN and EBELP = t1.EBELP)) * 100) ELSE 0 END) as PERC_SCOST,
   '' as STATUS, (SELECT min( EINDT ) FROM "AUPSUP_DATABASE.data.tables::ET_SAG_EKET" WHERE EBELN = t1.EBELN AND EBELP = t1.EBELP AND 
   (SELECT TO_DATE(EINDT, 'YYYYMMDD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY") between (SELECT TO_DATE(:I_EINDT_FROM, 'YYYYMMDD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY") AND 
      (SELECT TO_DATE(:I_EINDT_TO, 'YYYYMMDD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY")
   ) as EKET_EKEH_EINDT
   FROM :ET_SAG_EKPO as t1 );

END IF;


      BEGIN
         DECLARE CURSOR cursorPiani FOR SELECT * FROM #OUT_POS_PIANI_CONS;
         FOR cursorRow AS cursorPiani DO
            UPDATE #OUT_POS_PIANI_CONS set STATUS = (
            SELECT CASE 
               WHEN (a.PERC_SCOST) <= 10 THEN (SELECT CRITICITA FROM "AUPSUP_DATABASE.data.tables::T_MATRICE_CRITICITA" WHERE RANGE_PERC = 0 AND SCOSTAMENTO_GG = a.GG_SCOSTAMENTO)
               WHEN (a.PERC_SCOST > 10 AND a.PERC_SCOST <= 20) THEN (SELECT CRITICITA FROM "AUPSUP_DATABASE.data.tables::T_MATRICE_CRITICITA" WHERE RANGE_PERC = 1 AND SCOSTAMENTO_GG = a.GG_SCOSTAMENTO)
               WHEN (a.PERC_SCOST > 20 AND a.PERC_SCOST <= 30) THEN (SELECT CRITICITA FROM "AUPSUP_DATABASE.data.tables::T_MATRICE_CRITICITA" WHERE RANGE_PERC = 2 AND SCOSTAMENTO_GG = a.GG_SCOSTAMENTO)
               WHEN (a.PERC_SCOST > 30 AND a.PERC_SCOST <= 40) THEN (SELECT CRITICITA FROM "AUPSUP_DATABASE.data.tables::T_MATRICE_CRITICITA" WHERE RANGE_PERC = 3 AND SCOSTAMENTO_GG = a.GG_SCOSTAMENTO)
               WHEN (a.PERC_SCOST > 40 AND a.PERC_SCOST <= 50) THEN (SELECT CRITICITA FROM "AUPSUP_DATABASE.data.tables::T_MATRICE_CRITICITA" WHERE RANGE_PERC = 4 AND SCOSTAMENTO_GG = a.GG_SCOSTAMENTO)
               WHEN (a.PERC_SCOST > 50 AND a.PERC_SCOST <= 60) THEN (SELECT CRITICITA FROM "AUPSUP_DATABASE.data.tables::T_MATRICE_CRITICITA" WHERE RANGE_PERC = 5 AND SCOSTAMENTO_GG = a.GG_SCOSTAMENTO)
               WHEN (a.PERC_SCOST > 60 AND a.PERC_SCOST <= 70) THEN (SELECT CRITICITA FROM "AUPSUP_DATABASE.data.tables::T_MATRICE_CRITICITA" WHERE RANGE_PERC = 6 AND SCOSTAMENTO_GG = a.GG_SCOSTAMENTO)
               WHEN (a.PERC_SCOST > 70 AND a.PERC_SCOST <= 80) THEN (SELECT CRITICITA FROM "AUPSUP_DATABASE.data.tables::T_MATRICE_CRITICITA" WHERE RANGE_PERC = 7 AND SCOSTAMENTO_GG = a.GG_SCOSTAMENTO)
               WHEN (a.PERC_SCOST > 80 AND a.PERC_SCOST <= 90) THEN (SELECT CRITICITA FROM "AUPSUP_DATABASE.data.tables::T_MATRICE_CRITICITA" WHERE RANGE_PERC = 8 AND SCOSTAMENTO_GG = a.GG_SCOSTAMENTO)
               WHEN (a.PERC_SCOST > 90 AND a.PERC_SCOST < 100) THEN (SELECT CRITICITA FROM "AUPSUP_DATABASE.data.tables::T_MATRICE_CRITICITA" WHERE RANGE_PERC = 9 AND SCOSTAMENTO_GG = a.GG_SCOSTAMENTO)
               WHEN (a.PERC_SCOST >= 100) THEN (SELECT CRITICITA FROM "AUPSUP_DATABASE.data.tables::T_MATRICE_CRITICITA" WHERE RANGE_PERC = 10 AND SCOSTAMENTO_GG = a.GG_SCOSTAMENTO)
            END FROM #OUT_POS_PIANI_CONS as a WHERE a.EBELN = cursorRow.EBELN and a.EBELP = cursorRow.EBELP
         ) WHERE EBELN = cursorRow.EBELN and EBELP = cursorRow.EBELP;
         END FOR;
      END;

   OUT_POS_PIANI_CONS = SELECT * FROM #OUT_POS_PIANI_CONS;

   IF I_EINDT_FROM <> '' AND I_EINDT_TO <> '' THEN

      OUT_POS_PIANI_CONS = SELECT * FROM :OUT_POS_PIANI_CONS WHERE 
      (EBELN,EBELP) IN (SELECT EBELN, EBELP FROM :ET_SAG_EKET WHERE (SELECT TO_DATE(EINDT, 'YYYYMMDD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY") between (SELECT TO_DATE(:I_EINDT_FROM, 'YYYYMMDD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY") AND 
      (SELECT TO_DATE(:I_EINDT_TO, 'YYYYMMDD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY")) 
      OR
      (EBELN,EBELP) IN (SELECT EBELN, EBELP FROM :ET_SAG_EKEH WHERE (SELECT TO_DATE(EINDT, 'YYYYMMDD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY") between (SELECT TO_DATE(:I_EINDT_FROM, 'YYYYMMDD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY") AND
      (SELECT TO_DATE(:I_EINDT_TO, 'YYYYMMDD') FROM "AUPSUP_DATABASE.data.synonyms::DUMMY"));

   END IF;

DROP TABLE #IT_BSART;
--DROP TABLE #IT_BSTYP;
DROP TABLE #IT_CUST_FIELDS;
DROP TABLE #OUT_POS_PIANI_CONS;
END;
