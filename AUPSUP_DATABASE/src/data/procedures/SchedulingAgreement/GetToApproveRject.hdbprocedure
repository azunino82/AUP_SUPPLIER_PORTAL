PROCEDURE "AUPSUP_DATABASE.data.procedures.SchedulingAgreement::GetToApproveRject" ( 
IN userid NVARCHAR(250),
IN I_EBELN NVARCHAR(10),
IN I_EBELP VARCHAR(5),
OUT OUT_TABLE TABLE (EBELN NVARCHAR(10), EBELP VARCHAR(5),EINDT VARCHAR(8),QTA_CONFERMATA DECIMAL(14,3),QTA_RICHIESTA DECIMAL(14,3),ISTOCONFIRM NVARCHAR(1))
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER AS
BEGIN

DECLARE I_BSART NVARCHAR(4);
DECLARE I_BSTYP NVARCHAR(1);
DECLARE GG_ESTRAZIONE INTEGER DEFAULT 0;
DECLARE TODAY_DATE DATE;
DECLARE END_DATE DATE;
DECLARE COUNTER INTEGER;


SELECT BSART INTO I_BSART FROM "AUPSUP_DATABASE.data.tables::ET_SAG_EKKO" WHERE EBELN = :I_EBELN;
SELECT BSTYP INTO I_BSTYP FROM "AUPSUP_DATABASE.data.tables::ET_SAG_EKPO" WHERE EBELN = :I_EBELN and EBELP = :I_EBELP;

--per i calcoli estrarre le EKES da back end e le EKES da approvare Ordinare le conferma (sia da back end che da apporvare) con logica crescente usando EKES-EINDT

OUT_TABLE = 
    SELECT a.EBELN, a.EBELP, a.EINDT,a.MENGE as QTA_CONFERMATA,0 AS QTA_RICHIESTA, '' as ISTOCONFIRM FROM "AUPSUP_DATABASE.data.tables::ET_SAG_EKES" as a 
    WHERE a.EBELN = :I_EBELN AND a.EBELP = :I_EBELP
UNION 
    SELECT a.EBELN, a.EBELP, a.EINDT,a.MENGE as QTA_CONFERMATA,0 AS QTA_RICHIESTA, 'X' as ISTOCONFIRM FROM "AUPSUP_DATABASE.data.tables::T_APPROVE_SAG_EKES_EKET" as a 
    WHERE a.EBELN = :I_EBELN AND a.EBELP = :I_EBELP
ORDER BY EINDT ASC;

-- Quantit√† Richiesta:  per ogni riga di EKES (sia da apporvare o da back end) sommare tutte le righe EKET-MENGE (o EKEH-MENGE) 
-- con EINDT uguale alla data di EKES esposta

OUT_TABLE = SELECT a.EBELN, a.EBELP, a.EINDT,a.QTA_CONFERMATA,(COALESCE((
    SELECT SUM(MENGE) FROM "AUPSUP_DATABASE.data.tables::ET_SAG_EKET" WHERE EBELN = a.EBELN AND EBELP = a.EBELP AND EINDT = a.EINDT),0)
    + COALESCE((
    SELECT SUM(MENGE) FROM "AUPSUP_DATABASE.data.tables::ET_SAG_EKEH" WHERE EBELN = a.EBELN AND EBELP = a.EBELP AND EINDT = a.EINDT),0)
)
AS QTA_RICHIESTA, ISTOCONFIRM FROM :OUT_TABLE as a;

END