PROCEDURE "AUPSUP_DATABASE.data.procedures.SchedulingAgreement::GetToApproveRject" ( 
IN userid NVARCHAR(250),
IN I_EBELN NVARCHAR(10),
IN I_EBELP VARCHAR(5),
IN I_BSTYP TABLE (BSTYP NVARCHAR(1)),
IN I_SPRAS NVARCHAR(1),
OUT OUT_TABLE TABLE (EBELN NVARCHAR(10), EBELP VARCHAR(5),EKES_EINDT VARCHAR(8),XBLNR NVARCHAR(35),EBTYP NVARCHAR(2),EKET_EINDT VARCHAR(8), EKES_MENGE DECIMAL(14,3), EKET_MENGE DECIMAL(14,3), DELTA_GG INT, DELTA_QUANT DECIMAL(14,3), ISTOCONFIRM NVARCHAR(1), COUNTER VARCHAR(10), COMMENT NVARCHAR(500))
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER AS
BEGIN

DECLARE I_BSART NVARCHAR(4);
DECLARE GG_ESTRAZIONE INTEGER DEFAULT 0;
DECLARE TODAY_DATE DATE;
DECLARE END_DATE DATE;
DECLARE COUNTER INTEGER;
DECLARE IT_BSART TABLE (ESART NVARCHAR(4));
DECLARE CURRENT_SYSID NVARCHAR(30);
DECLARE IT_CUST_FIELDS TABLE (CUST_FIELD NVARCHAR(30),SOURCE_TABLE NVARCHAR(30),SOURCE_FIELD NVARCHAR(30));
DECLARE IT_EBELN TABLE (EBELN NVARCHAR(10));
DECLARE IT_EBELP TABLE (EBELP VARCHAR(5));
DECLARE IT_EKGRP TABLE (EKGRP NVARCHAR(3));
DECLARE IT_EKORG TABLE (EKORG NVARCHAR(4));
DECLARE IT_LIFNR TABLE (ELIFN NVARCHAR(10));
DECLARE out_anagrafica TABLE(METAID VARCHAR(50), DESCR NVARCHAR(255));
DECLARE out_lifnr TABLE(METAID VARCHAR(50), LIFNR NVARCHAR(10), DESCR NVARCHAR(35));
DECLARE IT_MATNR TABLE (MATNR NVARCHAR(40));
DECLARE IT_WERKS TABLE (EWERK NVARCHAR(4),DESCR NVARCHAR(255));

DECLARE ET_SAG_EKEH "AUPSUP_DATABASE.data.structures.SchedulingAgreement::ET_SAG_EKEHStructure";
DECLARE ET_SAG_EKEK "AUPSUP_DATABASE.data.structures.SchedulingAgreement::ET_SAG_EKEKStructure";
DECLARE ET_SAG_EKES "AUPSUP_DATABASE.data.structures.SchedulingAgreement::ET_SAG_EKESStructure";
DECLARE ET_SAG_EKET "AUPSUP_DATABASE.data.structures.SchedulingAgreement::ET_SAG_EKETStructure";
DECLARE ET_SAG_EKKO "AUPSUP_DATABASE.data.structures.SchedulingAgreement::ET_SAG_EKKOStructure";
DECLARE ET_SAG_EKPO "AUPSUP_DATABASE.data.structures.SchedulingAgreement::ET_SAG_EKPOStructure";

create local temporary table #IT_CUST_FIELDS (CUST_FIELD NVARCHAR(30),SOURCE_TABLE NVARCHAR(30),SOURCE_FIELD NVARCHAR(30));
create local temporary table #IT_EKGRP (EKGRP NVARCHAR(3));
create local temporary table #IT_MATNR (MATNR NVARCHAR(40));

IT_CUST_FIELDS = SELECT * FROM #IT_CUST_FIELDS;
IT_EKGRP = SELECT * FROM #IT_EKGRP;
IT_MATNR = SELECT * FROM #IT_MATNR;

/* prendo le organizzazioni commerciali dell'utente connesso*/
CALL "AUPSUP_DATABASE.data.procedures.Utils::GetUserPurchaseOrgs"(:userid,:IT_EKORG);

CALL "AUPSUP_DATABASE.data.procedures.Utils::GetMetasupplierList"(:userid,:out_anagrafica,:out_lifnr);
IT_LIFNR = SELECT LIFNR AS ELIFN FROM :out_lifnr;

CALL "AUPSUP_DATABASE.data.procedures.Utils::GetUserPlants"(:userid,:IT_WERKS);

/*PRENDO IL SYD DA PASSARE AL SERVIZIO*/
SELECT SYSID INTO CURRENT_SYSID FROM "AUPSUP_DATABASE.data.tables::T_BCKND_SYSTEMS";

-- Sarebbe opportuno che allâ€™estrazione siano aggiornate le tabelle usando i dati da S4.

IT_BSART = SELECT BSART AS ESART FROM "AUPSUP_DATABASE.data.tables::T_ORDERS_TYPES" WHERE SYSID = :CURRENT_SYSID and LISTA_ODA = 'X' and BSTYP IN (SELECT BSTYP FROM :I_BSTYP);
--IT_BSTYP = SELECT 'L' AS BSTYP FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";
IT_EBELN = SELECT :I_EBELN AS EBELN FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";
IT_EBELP = SELECT :I_EBELP AS EBELP FROM "AUPSUP_DATABASE.data.synonyms::DUMMY";

CALL "AUPSUP_DATABASE.data.virtualProcedures::VIRTUAL_MM00_SAG_DOC_LIST"(:IT_BSART,:I_BSTYP,:IT_CUST_FIELDS,:IT_EBELN,:IT_EBELP,:IT_EKGRP,:IT_EKORG,:IT_LIFNR,:IT_MATNR,:I_SPRAS,:IT_WERKS,'X','X','X','X','X','X','X','X','X','X','X','X','X',:ET_SAG_EKEH,:ET_SAG_EKEK,:ET_SAG_EKES,:ET_SAG_EKET,:ET_SAG_EKKO,:ET_SAG_EKPO);

--per i calcoli estrarre le EKES da back end e le EKES da approvare Ordinare le conferma (sia da back end che da apporvare) con logica crescente usando EKES-EINDT

OUT_TABLE = 
  /* questa select serviva per i progressivi Giani per Luve giani vuole vedere solo le sched da confermare  SELECT a.EBELN, a.EBELP, a.EINDT AS EKES_EINDT, a.XBLNR AS XBLNR, a.EBTYP AS EBTYP, b.EINDT as EKET_EINDT, EKES_MENGE, b.MENGE as EKET_MENGE,(a.EINDT - COALESCE(b.EINDT,0) - COALESCE((SELECT EINDT FROM :ET_SAG_EKEH WHERE ETENR = a.XBLNR AND EBELN = a.EBELN AND EBELP = a.EBELP),0)) AS DELTA_GG, (a.MENGE - 
    (COALESCE((SELECT SUM(MENGE) FROM :ET_SAG_EKET WHERE ETENR = a.XBLNR AND EBELN = a.EBELN AND EBELP = a.EBELP),0) + 
    COALESCE((SELECT SUM(MENGE) FROM :ET_SAG_EKEH WHERE ETENR = a.XBLNR AND EBELN = a.EBELN AND EBELP = a.EBELP),0))) AS DELTA_QUANT, '' as ISTOCONFIRM 
    FROM :ET_SAG_EKES as a 
    INNER JOIN :ET_SAG_EKET as b
    ON a.EBELN = b.EBELN AND a.EBELP = b.EBELP AND a.XBLNR = b.ETENR
    --WHERE a.EBELN = :I_EBELN AND a.EBELP = :I_EBELP
UNION */
    SELECT a.EBELN, a.EBELP, a.EINDT AS EKES_EINDT, a.XBLNR AS XBLNR, a.EBTYP AS EBTYP, b.EINDT as EKET_EINDT, a.MENGE as EKES_MENGE, b.MENGE as EKET_MENGE,
    ABS ((SELECT DAYS_BETWEEN (TO_DATE (a.EINDT, 'YYYYMMDD'), TO_DATE((SELECT EINDT FROM :ET_SAG_EKET WHERE ETENR = a.XBLNR AND EBELN = a.EBELN AND EBELP = a.EBELP), 'YYYYMMDD')) "days between" FROM "AUPSUP_DATABASE.data.synonyms::DUMMY")) AS DELTA_GG, 
    (a.MENGE - 
    (COALESCE((SELECT SUM(MENGE) FROM :ET_SAG_EKET WHERE ETENR = a.XBLNR AND EBELN = a.EBELN AND EBELP = a.EBELP),0) + 
    COALESCE((SELECT SUM(MENGE) FROM :ET_SAG_EKEH WHERE ETENR = a.XBLNR AND EBELN = a.EBELN AND EBELP = a.EBELP),0)) + 
    COALESCE((SELECT SUM(MENGE) FROM :ET_SAG_EKES WHERE XBLNR = a.XBLNR AND EBELN = a.EBELN AND EBELP = a.EBELP),0)
    ) AS DELTA_QUANT, 'X' as ISTOCONFIRM, a.COUNTER as COUNTER, a.COMMENT as COMMENT 
    FROM "AUPSUP_DATABASE.data.tables::T_APPROVE_SAG_EKES_EKET" as a 
    INNER JOIN :ET_SAG_EKET as b
    ON a.EBELN = b.EBELN AND a.EBELP = b.EBELP AND a.XBLNR = b.ETENR and (a.STATUS = null OR a.STATUS = '' OR a.STATUS = 'RC')
    --WHERE a.EBELN = :I_EBELN AND a.EBELP = :I_EBELP
ORDER BY EKES_EINDT ASC;


DROP TABLE #IT_CUST_FIELDS;
DROP TABLE #IT_EKGRP;
DROP TABLE #IT_MATNR;

END